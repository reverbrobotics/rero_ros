// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: hotword.proto
#ifndef GRPC_hotword_2eproto__INCLUDED
#define GRPC_hotword_2eproto__INCLUDED

#include "hotword.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace rero {

class HotwordDetection final {
 public:
  static constexpr char const* service_full_name() {
    return "rero.HotwordDetection";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::rero::Audio, ::rero::HotwordResult>> StartHotwordStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::rero::Audio, ::rero::HotwordResult>>(StartHotwordStreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::rero::Audio, ::rero::HotwordResult>> AsyncStartHotwordStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::rero::Audio, ::rero::HotwordResult>>(AsyncStartHotwordStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::rero::Audio, ::rero::HotwordResult>> PrepareAsyncStartHotwordStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::rero::Audio, ::rero::HotwordResult>>(PrepareAsyncStartHotwordStreamRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::rero::Audio>> RecognizeHotword(::grpc::ClientContext* context, ::rero::HotwordResult* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::rero::Audio>>(RecognizeHotwordRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::rero::Audio>> AsyncRecognizeHotword(::grpc::ClientContext* context, ::rero::HotwordResult* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::rero::Audio>>(AsyncRecognizeHotwordRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::rero::Audio>> PrepareAsyncRecognizeHotword(::grpc::ClientContext* context, ::rero::HotwordResult* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::rero::Audio>>(PrepareAsyncRecognizeHotwordRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::rero::Audio>> GetEmbedding(::grpc::ClientContext* context, ::rero::RawEmbedding* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::rero::Audio>>(GetEmbeddingRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::rero::Audio>> AsyncGetEmbedding(::grpc::ClientContext* context, ::rero::RawEmbedding* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::rero::Audio>>(AsyncGetEmbeddingRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::rero::Audio>> PrepareAsyncGetEmbedding(::grpc::ClientContext* context, ::rero::RawEmbedding* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::rero::Audio>>(PrepareAsyncGetEmbeddingRaw(context, response, cq));
    }
    virtual ::grpc::Status AddEmbeddingToHotword(::grpc::ClientContext* context, const ::rero::HotwordEmbedding& request, ::rero::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rero::Result>> AsyncAddEmbeddingToHotword(::grpc::ClientContext* context, const ::rero::HotwordEmbedding& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rero::Result>>(AsyncAddEmbeddingToHotwordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rero::Result>> PrepareAsyncAddEmbeddingToHotword(::grpc::ClientContext* context, const ::rero::HotwordEmbedding& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rero::Result>>(PrepareAsyncAddEmbeddingToHotwordRaw(context, request, cq));
    }
    virtual ::grpc::Status PersistHotword(::grpc::ClientContext* context, const ::rero::HotwordFileName& request, ::rero::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rero::Result>> AsyncPersistHotword(::grpc::ClientContext* context, const ::rero::HotwordFileName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rero::Result>>(AsyncPersistHotwordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rero::Result>> PrepareAsyncPersistHotword(::grpc::ClientContext* context, const ::rero::HotwordFileName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rero::Result>>(PrepareAsyncPersistHotwordRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void StartHotwordStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::rero::Audio,::rero::HotwordResult>* reactor) = 0;
      virtual void RecognizeHotword(::grpc::ClientContext* context, ::rero::HotwordResult* response, ::grpc::ClientWriteReactor< ::rero::Audio>* reactor) = 0;
      virtual void GetEmbedding(::grpc::ClientContext* context, ::rero::RawEmbedding* response, ::grpc::ClientWriteReactor< ::rero::Audio>* reactor) = 0;
      virtual void AddEmbeddingToHotword(::grpc::ClientContext* context, const ::rero::HotwordEmbedding* request, ::rero::Result* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddEmbeddingToHotword(::grpc::ClientContext* context, const ::rero::HotwordEmbedding* request, ::rero::Result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PersistHotword(::grpc::ClientContext* context, const ::rero::HotwordFileName* request, ::rero::Result* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PersistHotword(::grpc::ClientContext* context, const ::rero::HotwordFileName* request, ::rero::Result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderWriterInterface< ::rero::Audio, ::rero::HotwordResult>* StartHotwordStreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::rero::Audio, ::rero::HotwordResult>* AsyncStartHotwordStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::rero::Audio, ::rero::HotwordResult>* PrepareAsyncStartHotwordStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::rero::Audio>* RecognizeHotwordRaw(::grpc::ClientContext* context, ::rero::HotwordResult* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::rero::Audio>* AsyncRecognizeHotwordRaw(::grpc::ClientContext* context, ::rero::HotwordResult* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::rero::Audio>* PrepareAsyncRecognizeHotwordRaw(::grpc::ClientContext* context, ::rero::HotwordResult* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::rero::Audio>* GetEmbeddingRaw(::grpc::ClientContext* context, ::rero::RawEmbedding* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::rero::Audio>* AsyncGetEmbeddingRaw(::grpc::ClientContext* context, ::rero::RawEmbedding* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::rero::Audio>* PrepareAsyncGetEmbeddingRaw(::grpc::ClientContext* context, ::rero::RawEmbedding* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rero::Result>* AsyncAddEmbeddingToHotwordRaw(::grpc::ClientContext* context, const ::rero::HotwordEmbedding& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rero::Result>* PrepareAsyncAddEmbeddingToHotwordRaw(::grpc::ClientContext* context, const ::rero::HotwordEmbedding& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rero::Result>* AsyncPersistHotwordRaw(::grpc::ClientContext* context, const ::rero::HotwordFileName& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rero::Result>* PrepareAsyncPersistHotwordRaw(::grpc::ClientContext* context, const ::rero::HotwordFileName& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReaderWriter< ::rero::Audio, ::rero::HotwordResult>> StartHotwordStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::rero::Audio, ::rero::HotwordResult>>(StartHotwordStreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::rero::Audio, ::rero::HotwordResult>> AsyncStartHotwordStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::rero::Audio, ::rero::HotwordResult>>(AsyncStartHotwordStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::rero::Audio, ::rero::HotwordResult>> PrepareAsyncStartHotwordStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::rero::Audio, ::rero::HotwordResult>>(PrepareAsyncStartHotwordStreamRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::rero::Audio>> RecognizeHotword(::grpc::ClientContext* context, ::rero::HotwordResult* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::rero::Audio>>(RecognizeHotwordRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::rero::Audio>> AsyncRecognizeHotword(::grpc::ClientContext* context, ::rero::HotwordResult* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::rero::Audio>>(AsyncRecognizeHotwordRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::rero::Audio>> PrepareAsyncRecognizeHotword(::grpc::ClientContext* context, ::rero::HotwordResult* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::rero::Audio>>(PrepareAsyncRecognizeHotwordRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::rero::Audio>> GetEmbedding(::grpc::ClientContext* context, ::rero::RawEmbedding* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::rero::Audio>>(GetEmbeddingRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::rero::Audio>> AsyncGetEmbedding(::grpc::ClientContext* context, ::rero::RawEmbedding* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::rero::Audio>>(AsyncGetEmbeddingRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::rero::Audio>> PrepareAsyncGetEmbedding(::grpc::ClientContext* context, ::rero::RawEmbedding* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::rero::Audio>>(PrepareAsyncGetEmbeddingRaw(context, response, cq));
    }
    ::grpc::Status AddEmbeddingToHotword(::grpc::ClientContext* context, const ::rero::HotwordEmbedding& request, ::rero::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rero::Result>> AsyncAddEmbeddingToHotword(::grpc::ClientContext* context, const ::rero::HotwordEmbedding& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rero::Result>>(AsyncAddEmbeddingToHotwordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rero::Result>> PrepareAsyncAddEmbeddingToHotword(::grpc::ClientContext* context, const ::rero::HotwordEmbedding& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rero::Result>>(PrepareAsyncAddEmbeddingToHotwordRaw(context, request, cq));
    }
    ::grpc::Status PersistHotword(::grpc::ClientContext* context, const ::rero::HotwordFileName& request, ::rero::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rero::Result>> AsyncPersistHotword(::grpc::ClientContext* context, const ::rero::HotwordFileName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rero::Result>>(AsyncPersistHotwordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rero::Result>> PrepareAsyncPersistHotword(::grpc::ClientContext* context, const ::rero::HotwordFileName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rero::Result>>(PrepareAsyncPersistHotwordRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void StartHotwordStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::rero::Audio,::rero::HotwordResult>* reactor) override;
      void RecognizeHotword(::grpc::ClientContext* context, ::rero::HotwordResult* response, ::grpc::ClientWriteReactor< ::rero::Audio>* reactor) override;
      void GetEmbedding(::grpc::ClientContext* context, ::rero::RawEmbedding* response, ::grpc::ClientWriteReactor< ::rero::Audio>* reactor) override;
      void AddEmbeddingToHotword(::grpc::ClientContext* context, const ::rero::HotwordEmbedding* request, ::rero::Result* response, std::function<void(::grpc::Status)>) override;
      void AddEmbeddingToHotword(::grpc::ClientContext* context, const ::rero::HotwordEmbedding* request, ::rero::Result* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PersistHotword(::grpc::ClientContext* context, const ::rero::HotwordFileName* request, ::rero::Result* response, std::function<void(::grpc::Status)>) override;
      void PersistHotword(::grpc::ClientContext* context, const ::rero::HotwordFileName* request, ::rero::Result* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReaderWriter< ::rero::Audio, ::rero::HotwordResult>* StartHotwordStreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::rero::Audio, ::rero::HotwordResult>* AsyncStartHotwordStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::rero::Audio, ::rero::HotwordResult>* PrepareAsyncStartHotwordStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::rero::Audio>* RecognizeHotwordRaw(::grpc::ClientContext* context, ::rero::HotwordResult* response) override;
    ::grpc::ClientAsyncWriter< ::rero::Audio>* AsyncRecognizeHotwordRaw(::grpc::ClientContext* context, ::rero::HotwordResult* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::rero::Audio>* PrepareAsyncRecognizeHotwordRaw(::grpc::ClientContext* context, ::rero::HotwordResult* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::rero::Audio>* GetEmbeddingRaw(::grpc::ClientContext* context, ::rero::RawEmbedding* response) override;
    ::grpc::ClientAsyncWriter< ::rero::Audio>* AsyncGetEmbeddingRaw(::grpc::ClientContext* context, ::rero::RawEmbedding* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::rero::Audio>* PrepareAsyncGetEmbeddingRaw(::grpc::ClientContext* context, ::rero::RawEmbedding* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rero::Result>* AsyncAddEmbeddingToHotwordRaw(::grpc::ClientContext* context, const ::rero::HotwordEmbedding& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rero::Result>* PrepareAsyncAddEmbeddingToHotwordRaw(::grpc::ClientContext* context, const ::rero::HotwordEmbedding& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rero::Result>* AsyncPersistHotwordRaw(::grpc::ClientContext* context, const ::rero::HotwordFileName& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rero::Result>* PrepareAsyncPersistHotwordRaw(::grpc::ClientContext* context, const ::rero::HotwordFileName& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StartHotwordStream_;
    const ::grpc::internal::RpcMethod rpcmethod_RecognizeHotword_;
    const ::grpc::internal::RpcMethod rpcmethod_GetEmbedding_;
    const ::grpc::internal::RpcMethod rpcmethod_AddEmbeddingToHotword_;
    const ::grpc::internal::RpcMethod rpcmethod_PersistHotword_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status StartHotwordStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::rero::HotwordResult, ::rero::Audio>* stream);
    virtual ::grpc::Status RecognizeHotword(::grpc::ServerContext* context, ::grpc::ServerReader< ::rero::Audio>* reader, ::rero::HotwordResult* response);
    virtual ::grpc::Status GetEmbedding(::grpc::ServerContext* context, ::grpc::ServerReader< ::rero::Audio>* reader, ::rero::RawEmbedding* response);
    virtual ::grpc::Status AddEmbeddingToHotword(::grpc::ServerContext* context, const ::rero::HotwordEmbedding* request, ::rero::Result* response);
    virtual ::grpc::Status PersistHotword(::grpc::ServerContext* context, const ::rero::HotwordFileName* request, ::rero::Result* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_StartHotwordStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartHotwordStream() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StartHotwordStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartHotwordStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::rero::HotwordResult, ::rero::Audio>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartHotwordStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::rero::HotwordResult, ::rero::Audio>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RecognizeHotword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RecognizeHotword() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RecognizeHotword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecognizeHotword(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::rero::Audio>* /*reader*/, ::rero::HotwordResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecognizeHotword(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::rero::HotwordResult, ::rero::Audio>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEmbedding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetEmbedding() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetEmbedding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEmbedding(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::rero::Audio>* /*reader*/, ::rero::RawEmbedding* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEmbedding(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::rero::RawEmbedding, ::rero::Audio>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddEmbeddingToHotword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddEmbeddingToHotword() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_AddEmbeddingToHotword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEmbeddingToHotword(::grpc::ServerContext* /*context*/, const ::rero::HotwordEmbedding* /*request*/, ::rero::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddEmbeddingToHotword(::grpc::ServerContext* context, ::rero::HotwordEmbedding* request, ::grpc::ServerAsyncResponseWriter< ::rero::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PersistHotword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PersistHotword() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_PersistHotword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PersistHotword(::grpc::ServerContext* /*context*/, const ::rero::HotwordFileName* /*request*/, ::rero::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPersistHotword(::grpc::ServerContext* context, ::rero::HotwordFileName* request, ::grpc::ServerAsyncResponseWriter< ::rero::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StartHotwordStream<WithAsyncMethod_RecognizeHotword<WithAsyncMethod_GetEmbedding<WithAsyncMethod_AddEmbeddingToHotword<WithAsyncMethod_PersistHotword<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_StartHotwordStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StartHotwordStream() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::rero::Audio, ::rero::HotwordResult>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->StartHotwordStream(context); }));
    }
    ~WithCallbackMethod_StartHotwordStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartHotwordStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::rero::HotwordResult, ::rero::Audio>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::rero::Audio, ::rero::HotwordResult>* StartHotwordStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RecognizeHotword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RecognizeHotword() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::rero::Audio, ::rero::HotwordResult>(
            [this](
                   ::grpc::CallbackServerContext* context, ::rero::HotwordResult* response) { return this->RecognizeHotword(context, response); }));
    }
    ~WithCallbackMethod_RecognizeHotword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecognizeHotword(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::rero::Audio>* /*reader*/, ::rero::HotwordResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::rero::Audio>* RecognizeHotword(
      ::grpc::CallbackServerContext* /*context*/, ::rero::HotwordResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetEmbedding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetEmbedding() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::rero::Audio, ::rero::RawEmbedding>(
            [this](
                   ::grpc::CallbackServerContext* context, ::rero::RawEmbedding* response) { return this->GetEmbedding(context, response); }));
    }
    ~WithCallbackMethod_GetEmbedding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEmbedding(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::rero::Audio>* /*reader*/, ::rero::RawEmbedding* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::rero::Audio>* GetEmbedding(
      ::grpc::CallbackServerContext* /*context*/, ::rero::RawEmbedding* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddEmbeddingToHotword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddEmbeddingToHotword() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::rero::HotwordEmbedding, ::rero::Result>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rero::HotwordEmbedding* request, ::rero::Result* response) { return this->AddEmbeddingToHotword(context, request, response); }));}
    void SetMessageAllocatorFor_AddEmbeddingToHotword(
        ::grpc::MessageAllocator< ::rero::HotwordEmbedding, ::rero::Result>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rero::HotwordEmbedding, ::rero::Result>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddEmbeddingToHotword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEmbeddingToHotword(::grpc::ServerContext* /*context*/, const ::rero::HotwordEmbedding* /*request*/, ::rero::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddEmbeddingToHotword(
      ::grpc::CallbackServerContext* /*context*/, const ::rero::HotwordEmbedding* /*request*/, ::rero::Result* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PersistHotword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PersistHotword() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::rero::HotwordFileName, ::rero::Result>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rero::HotwordFileName* request, ::rero::Result* response) { return this->PersistHotword(context, request, response); }));}
    void SetMessageAllocatorFor_PersistHotword(
        ::grpc::MessageAllocator< ::rero::HotwordFileName, ::rero::Result>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rero::HotwordFileName, ::rero::Result>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PersistHotword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PersistHotword(::grpc::ServerContext* /*context*/, const ::rero::HotwordFileName* /*request*/, ::rero::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PersistHotword(
      ::grpc::CallbackServerContext* /*context*/, const ::rero::HotwordFileName* /*request*/, ::rero::Result* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_StartHotwordStream<WithCallbackMethod_RecognizeHotword<WithCallbackMethod_GetEmbedding<WithCallbackMethod_AddEmbeddingToHotword<WithCallbackMethod_PersistHotword<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_StartHotwordStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartHotwordStream() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StartHotwordStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartHotwordStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::rero::HotwordResult, ::rero::Audio>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RecognizeHotword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RecognizeHotword() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RecognizeHotword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecognizeHotword(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::rero::Audio>* /*reader*/, ::rero::HotwordResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetEmbedding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetEmbedding() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetEmbedding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEmbedding(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::rero::Audio>* /*reader*/, ::rero::RawEmbedding* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddEmbeddingToHotword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddEmbeddingToHotword() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_AddEmbeddingToHotword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEmbeddingToHotword(::grpc::ServerContext* /*context*/, const ::rero::HotwordEmbedding* /*request*/, ::rero::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PersistHotword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PersistHotword() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_PersistHotword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PersistHotword(::grpc::ServerContext* /*context*/, const ::rero::HotwordFileName* /*request*/, ::rero::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartHotwordStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartHotwordStream() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_StartHotwordStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartHotwordStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::rero::HotwordResult, ::rero::Audio>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartHotwordStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RecognizeHotword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RecognizeHotword() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RecognizeHotword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecognizeHotword(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::rero::Audio>* /*reader*/, ::rero::HotwordResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecognizeHotword(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetEmbedding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetEmbedding() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetEmbedding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEmbedding(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::rero::Audio>* /*reader*/, ::rero::RawEmbedding* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEmbedding(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddEmbeddingToHotword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddEmbeddingToHotword() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_AddEmbeddingToHotword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEmbeddingToHotword(::grpc::ServerContext* /*context*/, const ::rero::HotwordEmbedding* /*request*/, ::rero::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddEmbeddingToHotword(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PersistHotword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PersistHotword() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_PersistHotword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PersistHotword(::grpc::ServerContext* /*context*/, const ::rero::HotwordFileName* /*request*/, ::rero::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPersistHotword(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StartHotwordStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StartHotwordStream() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->StartHotwordStream(context); }));
    }
    ~WithRawCallbackMethod_StartHotwordStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartHotwordStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::rero::HotwordResult, ::rero::Audio>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* StartHotwordStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RecognizeHotword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RecognizeHotword() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->RecognizeHotword(context, response); }));
    }
    ~WithRawCallbackMethod_RecognizeHotword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecognizeHotword(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::rero::Audio>* /*reader*/, ::rero::HotwordResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* RecognizeHotword(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetEmbedding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetEmbedding() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->GetEmbedding(context, response); }));
    }
    ~WithRawCallbackMethod_GetEmbedding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEmbedding(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::rero::Audio>* /*reader*/, ::rero::RawEmbedding* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* GetEmbedding(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddEmbeddingToHotword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddEmbeddingToHotword() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddEmbeddingToHotword(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddEmbeddingToHotword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEmbeddingToHotword(::grpc::ServerContext* /*context*/, const ::rero::HotwordEmbedding* /*request*/, ::rero::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddEmbeddingToHotword(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PersistHotword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PersistHotword() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PersistHotword(context, request, response); }));
    }
    ~WithRawCallbackMethod_PersistHotword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PersistHotword(::grpc::ServerContext* /*context*/, const ::rero::HotwordFileName* /*request*/, ::rero::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PersistHotword(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddEmbeddingToHotword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddEmbeddingToHotword() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rero::HotwordEmbedding, ::rero::Result>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rero::HotwordEmbedding, ::rero::Result>* streamer) {
                       return this->StreamedAddEmbeddingToHotword(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddEmbeddingToHotword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddEmbeddingToHotword(::grpc::ServerContext* /*context*/, const ::rero::HotwordEmbedding* /*request*/, ::rero::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddEmbeddingToHotword(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rero::HotwordEmbedding,::rero::Result>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PersistHotword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PersistHotword() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rero::HotwordFileName, ::rero::Result>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rero::HotwordFileName, ::rero::Result>* streamer) {
                       return this->StreamedPersistHotword(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PersistHotword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PersistHotword(::grpc::ServerContext* /*context*/, const ::rero::HotwordFileName* /*request*/, ::rero::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPersistHotword(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rero::HotwordFileName,::rero::Result>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AddEmbeddingToHotword<WithStreamedUnaryMethod_PersistHotword<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_AddEmbeddingToHotword<WithStreamedUnaryMethod_PersistHotword<Service > > StreamedService;
};

}  // namespace rero


#endif  // GRPC_hotword_2eproto__INCLUDED
