// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: audio.proto
// Protobuf C++ Version: 6.31.0

#include "audio.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace rero {

inline constexpr StreamRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        format_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sample_rate_{0u},
        num_channels_{0u},
        frames_per_buffer_{0u},
        bytes_per_sample_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR StreamRequest::StreamRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(StreamRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StreamRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamRequestDefaultTypeInternal() {}
  union {
    StreamRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamRequestDefaultTypeInternal _StreamRequest_default_instance_;

inline constexpr PlayResult::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        pa_error_msg_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        pa_error_code_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR PlayResult::PlayResult(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(PlayResult_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PlayResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayResultDefaultTypeInternal() {}
  union {
    PlayResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayResultDefaultTypeInternal _PlayResult_default_instance_;

inline constexpr Audio::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        raw_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        num_samples_{0u},
        num_channels_{0u},
        bytes_per_sample_{0u},
        frames_per_buffer_{0u},
        sample_rate_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR Audio::Audio(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Audio_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AudioDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioDefaultTypeInternal() {}
  union {
    Audio _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioDefaultTypeInternal _Audio_default_instance_;
}  // namespace rero
static constexpr const ::_pb::EnumDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_enum_descriptors_audio_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_audio_2eproto = nullptr;
const ::uint32_t
    TableStruct_audio_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::rero::StreamRequest, _impl_._has_bits_),
        8, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::rero::StreamRequest, _impl_.sample_rate_),
        PROTOBUF_FIELD_OFFSET(::rero::StreamRequest, _impl_.num_channels_),
        PROTOBUF_FIELD_OFFSET(::rero::StreamRequest, _impl_.format_),
        PROTOBUF_FIELD_OFFSET(::rero::StreamRequest, _impl_.frames_per_buffer_),
        PROTOBUF_FIELD_OFFSET(::rero::StreamRequest, _impl_.bytes_per_sample_),
        1,
        2,
        0,
        3,
        4,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::rero::PlayResult, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::rero::PlayResult, _impl_.pa_error_code_),
        PROTOBUF_FIELD_OFFSET(::rero::PlayResult, _impl_.pa_error_msg_),
        1,
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::rero::Audio, _impl_._has_bits_),
        9, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::rero::Audio, _impl_.num_samples_),
        PROTOBUF_FIELD_OFFSET(::rero::Audio, _impl_.num_channels_),
        PROTOBUF_FIELD_OFFSET(::rero::Audio, _impl_.bytes_per_sample_),
        PROTOBUF_FIELD_OFFSET(::rero::Audio, _impl_.frames_per_buffer_),
        PROTOBUF_FIELD_OFFSET(::rero::Audio, _impl_.sample_rate_),
        PROTOBUF_FIELD_OFFSET(::rero::Audio, _impl_.raw_data_),
        1,
        2,
        3,
        4,
        5,
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::rero::StreamRequest)},
        {13, sizeof(::rero::PlayResult)},
        {20, sizeof(::rero::Audio)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::rero::_StreamRequest_default_instance_._instance,
    &::rero::_PlayResult_default_instance_._instance,
    &::rero::_Audio_default_instance_._instance,
};
const char descriptor_table_protodef_audio_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\013audio.proto\022\004rero\"\177\n\rStreamRequest\022\023\n\013"
    "sample_rate\030\001 \001(\r\022\024\n\014num_channels\030\002 \001(\r\022"
    "\016\n\006format\030\003 \001(\t\022\031\n\021frames_per_buffer\030\004 \001"
    "(\r\022\030\n\020bytes_per_sample\030\005 \001(\r\"9\n\nPlayResu"
    "lt\022\025\n\rpa_error_code\030\001 \001(\r\022\024\n\014pa_error_ms"
    "g\030\002 \001(\t\"\216\001\n\005Audio\022\023\n\013num_samples\030\001 \001(\r\022\024"
    "\n\014num_channels\030\002 \001(\r\022\030\n\020bytes_per_sample"
    "\030\003 \001(\r\022\031\n\021frames_per_buffer\030\004 \001(\r\022\023\n\013sam"
    "ple_rate\030\005 \001(\r\022\020\n\010raw_data\030\006 \001(\0142r\n\rAudi"
    "oStreamer\0221\n\tGetStream\022\023.rero.StreamRequ"
    "est\032\013.rero.Audio\"\0000\001\022.\n\tPlayAudio\022\013.rero"
    ".Audio\032\020.rero.PlayResult\"\000(\001b\006proto3"
};
static ::absl::once_flag descriptor_table_audio_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_audio_2eproto = {
    false,
    false,
    476,
    descriptor_table_protodef_audio_2eproto,
    "audio.proto",
    &descriptor_table_audio_2eproto_once,
    nullptr,
    0,
    3,
    schemas,
    file_default_instances,
    TableStruct_audio_2eproto::offsets,
    file_level_enum_descriptors_audio_2eproto,
    file_level_service_descriptors_audio_2eproto,
};
namespace rero {
// ===================================================================

class StreamRequest::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<StreamRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(StreamRequest, _impl_._has_bits_);
};

StreamRequest::StreamRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, StreamRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rero.StreamRequest)
}
PROTOBUF_NDEBUG_INLINE StreamRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::rero::StreamRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        format_(arena, from.format_) {}

StreamRequest::StreamRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const StreamRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, StreamRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  StreamRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, sample_rate_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, sample_rate_),
           offsetof(Impl_, bytes_per_sample_) -
               offsetof(Impl_, sample_rate_) +
               sizeof(Impl_::bytes_per_sample_));

  // @@protoc_insertion_point(copy_constructor:rero.StreamRequest)
}
PROTOBUF_NDEBUG_INLINE StreamRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        format_(arena) {}

inline void StreamRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, sample_rate_),
           0,
           offsetof(Impl_, bytes_per_sample_) -
               offsetof(Impl_, sample_rate_) +
               sizeof(Impl_::bytes_per_sample_));
}
StreamRequest::~StreamRequest() {
  // @@protoc_insertion_point(destructor:rero.StreamRequest)
  SharedDtor(*this);
}
inline void StreamRequest::SharedDtor(MessageLite& self) {
  StreamRequest& this_ = static_cast<StreamRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.format_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL StreamRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) StreamRequest(arena);
}
constexpr auto StreamRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(StreamRequest),
                                            alignof(StreamRequest));
}
constexpr auto StreamRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_StreamRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &StreamRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<StreamRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &StreamRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<StreamRequest>(), &StreamRequest::ByteSizeLong,
              &StreamRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(StreamRequest, _impl_._cached_size_),
          false,
      },
      &StreamRequest::kDescriptorMethods,
      &descriptor_table_audio_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull StreamRequest_class_data_ =
        StreamRequest::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
StreamRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&StreamRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(StreamRequest_class_data_.tc_table);
  return StreamRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 33, 2>
StreamRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StreamRequest, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    StreamRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rero::StreamRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 sample_rate = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StreamRequest, _impl_.sample_rate_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(StreamRequest, _impl_.sample_rate_)}},
    // uint32 num_channels = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StreamRequest, _impl_.num_channels_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(StreamRequest, _impl_.num_channels_)}},
    // string format = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(StreamRequest, _impl_.format_)}},
    // uint32 frames_per_buffer = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StreamRequest, _impl_.frames_per_buffer_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(StreamRequest, _impl_.frames_per_buffer_)}},
    // uint32 bytes_per_sample = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StreamRequest, _impl_.bytes_per_sample_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(StreamRequest, _impl_.bytes_per_sample_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 sample_rate = 1;
    {PROTOBUF_FIELD_OFFSET(StreamRequest, _impl_.sample_rate_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 num_channels = 2;
    {PROTOBUF_FIELD_OFFSET(StreamRequest, _impl_.num_channels_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // string format = 3;
    {PROTOBUF_FIELD_OFFSET(StreamRequest, _impl_.format_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 frames_per_buffer = 4;
    {PROTOBUF_FIELD_OFFSET(StreamRequest, _impl_.frames_per_buffer_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 bytes_per_sample = 5;
    {PROTOBUF_FIELD_OFFSET(StreamRequest, _impl_.bytes_per_sample_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
    "\22\0\0\6\0\0\0\0"
    "rero.StreamRequest"
    "format"
  }},
};
PROTOBUF_NOINLINE void StreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rero.StreamRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.format_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x0000001eu) != 0) {
    ::memset(&_impl_.sample_rate_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.bytes_per_sample_) -
        reinterpret_cast<char*>(&_impl_.sample_rate_)) + sizeof(_impl_.bytes_per_sample_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL StreamRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const StreamRequest& this_ = static_cast<const StreamRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL StreamRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const StreamRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:rero.StreamRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 sample_rate = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_sample_rate() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          1, this_._internal_sample_rate(), target);
    }
  }

  // uint32 num_channels = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_num_channels() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          2, this_._internal_num_channels(), target);
    }
  }

  // string format = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_format().empty()) {
      const ::std::string& _s = this_._internal_format();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "rero.StreamRequest.format");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // uint32 frames_per_buffer = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_frames_per_buffer() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          4, this_._internal_frames_per_buffer(), target);
    }
  }

  // uint32 bytes_per_sample = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_bytes_per_sample() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          5, this_._internal_bytes_per_sample(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rero.StreamRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t StreamRequest::ByteSizeLong(const MessageLite& base) {
  const StreamRequest& this_ = static_cast<const StreamRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t StreamRequest::ByteSizeLong() const {
  const StreamRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:rero.StreamRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    // string format = 3;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_format().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_format());
      }
    }
    // uint32 sample_rate = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_sample_rate() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_sample_rate());
      }
    }
    // uint32 num_channels = 2;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_num_channels() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_num_channels());
      }
    }
    // uint32 frames_per_buffer = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_frames_per_buffer() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_frames_per_buffer());
      }
    }
    // uint32 bytes_per_sample = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_bytes_per_sample() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_bytes_per_sample());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void StreamRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<StreamRequest*>(&to_msg);
  auto& from = static_cast<const StreamRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rero.StreamRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_format().empty()) {
        _this->_internal_set_format(from._internal_format());
      } else {
        if (_this->_impl_.format_.IsDefault()) {
          _this->_internal_set_format("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_sample_rate() != 0) {
        _this->_impl_.sample_rate_ = from._impl_.sample_rate_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_num_channels() != 0) {
        _this->_impl_.num_channels_ = from._impl_.num_channels_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_frames_per_buffer() != 0) {
        _this->_impl_.frames_per_buffer_ = from._impl_.frames_per_buffer_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_bytes_per_sample() != 0) {
        _this->_impl_.bytes_per_sample_ = from._impl_.bytes_per_sample_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StreamRequest::CopyFrom(const StreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rero.StreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void StreamRequest::InternalSwap(StreamRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.format_, &other->_impl_.format_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamRequest, _impl_.bytes_per_sample_)
      + sizeof(StreamRequest::_impl_.bytes_per_sample_)
      - PROTOBUF_FIELD_OFFSET(StreamRequest, _impl_.sample_rate_)>(
          reinterpret_cast<char*>(&_impl_.sample_rate_),
          reinterpret_cast<char*>(&other->_impl_.sample_rate_));
}

::google::protobuf::Metadata StreamRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PlayResult::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<PlayResult>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PlayResult, _impl_._has_bits_);
};

PlayResult::PlayResult(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, PlayResult_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rero.PlayResult)
}
PROTOBUF_NDEBUG_INLINE PlayResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::rero::PlayResult& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        pa_error_msg_(arena, from.pa_error_msg_) {}

PlayResult::PlayResult(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const PlayResult& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, PlayResult_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PlayResult* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.pa_error_code_ = from._impl_.pa_error_code_;

  // @@protoc_insertion_point(copy_constructor:rero.PlayResult)
}
PROTOBUF_NDEBUG_INLINE PlayResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        pa_error_msg_(arena) {}

inline void PlayResult::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.pa_error_code_ = {};
}
PlayResult::~PlayResult() {
  // @@protoc_insertion_point(destructor:rero.PlayResult)
  SharedDtor(*this);
}
inline void PlayResult::SharedDtor(MessageLite& self) {
  PlayResult& this_ = static_cast<PlayResult&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.pa_error_msg_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL PlayResult::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) PlayResult(arena);
}
constexpr auto PlayResult::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(PlayResult),
                                            alignof(PlayResult));
}
constexpr auto PlayResult::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_PlayResult_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &PlayResult::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<PlayResult>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &PlayResult::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<PlayResult>(), &PlayResult::ByteSizeLong,
              &PlayResult::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(PlayResult, _impl_._cached_size_),
          false,
      },
      &PlayResult::kDescriptorMethods,
      &descriptor_table_audio_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull PlayResult_class_data_ =
        PlayResult::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
PlayResult::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&PlayResult_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(PlayResult_class_data_.tc_table);
  return PlayResult_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 36, 2>
PlayResult::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PlayResult, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    PlayResult_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rero::PlayResult>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string pa_error_msg = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(PlayResult, _impl_.pa_error_msg_)}},
    // uint32 pa_error_code = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayResult, _impl_.pa_error_code_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(PlayResult, _impl_.pa_error_code_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 pa_error_code = 1;
    {PROTOBUF_FIELD_OFFSET(PlayResult, _impl_.pa_error_code_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // string pa_error_msg = 2;
    {PROTOBUF_FIELD_OFFSET(PlayResult, _impl_.pa_error_msg_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\17\0\14\0\0\0\0\0"
    "rero.PlayResult"
    "pa_error_msg"
  }},
};
PROTOBUF_NOINLINE void PlayResult::Clear() {
// @@protoc_insertion_point(message_clear_start:rero.PlayResult)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.pa_error_msg_.ClearNonDefaultToEmpty();
  }
  _impl_.pa_error_code_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL PlayResult::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const PlayResult& this_ = static_cast<const PlayResult&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL PlayResult::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const PlayResult& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:rero.PlayResult)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 pa_error_code = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_pa_error_code() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          1, this_._internal_pa_error_code(), target);
    }
  }

  // string pa_error_msg = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_pa_error_msg().empty()) {
      const ::std::string& _s = this_._internal_pa_error_msg();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "rero.PlayResult.pa_error_msg");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rero.PlayResult)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t PlayResult::ByteSizeLong(const MessageLite& base) {
  const PlayResult& this_ = static_cast<const PlayResult&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t PlayResult::ByteSizeLong() const {
  const PlayResult& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:rero.PlayResult)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // string pa_error_msg = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_pa_error_msg().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_pa_error_msg());
      }
    }
    // uint32 pa_error_code = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_pa_error_code() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_pa_error_code());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void PlayResult::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PlayResult*>(&to_msg);
  auto& from = static_cast<const PlayResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rero.PlayResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_pa_error_msg().empty()) {
        _this->_internal_set_pa_error_msg(from._internal_pa_error_msg());
      } else {
        if (_this->_impl_.pa_error_msg_.IsDefault()) {
          _this->_internal_set_pa_error_msg("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_pa_error_code() != 0) {
        _this->_impl_.pa_error_code_ = from._impl_.pa_error_code_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PlayResult::CopyFrom(const PlayResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rero.PlayResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PlayResult::InternalSwap(PlayResult* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.pa_error_msg_, &other->_impl_.pa_error_msg_, arena);
  swap(_impl_.pa_error_code_, other->_impl_.pa_error_code_);
}

::google::protobuf::Metadata PlayResult::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Audio::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<Audio>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Audio, _impl_._has_bits_);
};

Audio::Audio(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Audio_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rero.Audio)
}
PROTOBUF_NDEBUG_INLINE Audio::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::rero::Audio& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        raw_data_(arena, from.raw_data_) {}

Audio::Audio(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Audio& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Audio_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Audio* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, num_samples_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, num_samples_),
           offsetof(Impl_, sample_rate_) -
               offsetof(Impl_, num_samples_) +
               sizeof(Impl_::sample_rate_));

  // @@protoc_insertion_point(copy_constructor:rero.Audio)
}
PROTOBUF_NDEBUG_INLINE Audio::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        raw_data_(arena) {}

inline void Audio::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, num_samples_),
           0,
           offsetof(Impl_, sample_rate_) -
               offsetof(Impl_, num_samples_) +
               sizeof(Impl_::sample_rate_));
}
Audio::~Audio() {
  // @@protoc_insertion_point(destructor:rero.Audio)
  SharedDtor(*this);
}
inline void Audio::SharedDtor(MessageLite& self) {
  Audio& this_ = static_cast<Audio&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.raw_data_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Audio::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Audio(arena);
}
constexpr auto Audio::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Audio),
                                            alignof(Audio));
}
constexpr auto Audio::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Audio_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Audio::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Audio>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Audio::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Audio>(), &Audio::ByteSizeLong,
              &Audio::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Audio, _impl_._cached_size_),
          false,
      },
      &Audio::kDescriptorMethods,
      &descriptor_table_audio_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Audio_class_data_ =
        Audio::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Audio::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Audio_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Audio_class_data_.tc_table);
  return Audio_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 0, 2>
Audio::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Audio, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    Audio_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rero::Audio>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 num_samples = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Audio, _impl_.num_samples_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(Audio, _impl_.num_samples_)}},
    // uint32 num_channels = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Audio, _impl_.num_channels_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(Audio, _impl_.num_channels_)}},
    // uint32 bytes_per_sample = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Audio, _impl_.bytes_per_sample_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(Audio, _impl_.bytes_per_sample_)}},
    // uint32 frames_per_buffer = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Audio, _impl_.frames_per_buffer_), 4>(),
     {32, 4, 0, PROTOBUF_FIELD_OFFSET(Audio, _impl_.frames_per_buffer_)}},
    // uint32 sample_rate = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Audio, _impl_.sample_rate_), 5>(),
     {40, 5, 0, PROTOBUF_FIELD_OFFSET(Audio, _impl_.sample_rate_)}},
    // bytes raw_data = 6;
    {::_pbi::TcParser::FastBS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(Audio, _impl_.raw_data_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 num_samples = 1;
    {PROTOBUF_FIELD_OFFSET(Audio, _impl_.num_samples_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 num_channels = 2;
    {PROTOBUF_FIELD_OFFSET(Audio, _impl_.num_channels_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 bytes_per_sample = 3;
    {PROTOBUF_FIELD_OFFSET(Audio, _impl_.bytes_per_sample_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 frames_per_buffer = 4;
    {PROTOBUF_FIELD_OFFSET(Audio, _impl_.frames_per_buffer_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 sample_rate = 5;
    {PROTOBUF_FIELD_OFFSET(Audio, _impl_.sample_rate_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // bytes raw_data = 6;
    {PROTOBUF_FIELD_OFFSET(Audio, _impl_.raw_data_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void Audio::Clear() {
// @@protoc_insertion_point(message_clear_start:rero.Audio)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.raw_data_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x0000003eu) != 0) {
    ::memset(&_impl_.num_samples_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.sample_rate_) -
        reinterpret_cast<char*>(&_impl_.num_samples_)) + sizeof(_impl_.sample_rate_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Audio::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Audio& this_ = static_cast<const Audio&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Audio::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Audio& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:rero.Audio)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 num_samples = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_num_samples() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          1, this_._internal_num_samples(), target);
    }
  }

  // uint32 num_channels = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_num_channels() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          2, this_._internal_num_channels(), target);
    }
  }

  // uint32 bytes_per_sample = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_bytes_per_sample() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          3, this_._internal_bytes_per_sample(), target);
    }
  }

  // uint32 frames_per_buffer = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_frames_per_buffer() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          4, this_._internal_frames_per_buffer(), target);
    }
  }

  // uint32 sample_rate = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (this_._internal_sample_rate() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          5, this_._internal_sample_rate(), target);
    }
  }

  // bytes raw_data = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_raw_data().empty()) {
      const ::std::string& _s = this_._internal_raw_data();
      target = stream->WriteBytesMaybeAliased(6, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rero.Audio)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Audio::ByteSizeLong(const MessageLite& base) {
  const Audio& this_ = static_cast<const Audio&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Audio::ByteSizeLong() const {
  const Audio& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:rero.Audio)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    // bytes raw_data = 6;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_raw_data().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_raw_data());
      }
    }
    // uint32 num_samples = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_num_samples() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_num_samples());
      }
    }
    // uint32 num_channels = 2;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_num_channels() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_num_channels());
      }
    }
    // uint32 bytes_per_sample = 3;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_bytes_per_sample() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_bytes_per_sample());
      }
    }
    // uint32 frames_per_buffer = 4;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_frames_per_buffer() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_frames_per_buffer());
      }
    }
    // uint32 sample_rate = 5;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_sample_rate() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_sample_rate());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Audio::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Audio*>(&to_msg);
  auto& from = static_cast<const Audio&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rero.Audio)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_raw_data().empty()) {
        _this->_internal_set_raw_data(from._internal_raw_data());
      } else {
        if (_this->_impl_.raw_data_.IsDefault()) {
          _this->_internal_set_raw_data("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_num_samples() != 0) {
        _this->_impl_.num_samples_ = from._impl_.num_samples_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_num_channels() != 0) {
        _this->_impl_.num_channels_ = from._impl_.num_channels_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_bytes_per_sample() != 0) {
        _this->_impl_.bytes_per_sample_ = from._impl_.bytes_per_sample_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_frames_per_buffer() != 0) {
        _this->_impl_.frames_per_buffer_ = from._impl_.frames_per_buffer_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_sample_rate() != 0) {
        _this->_impl_.sample_rate_ = from._impl_.sample_rate_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Audio::CopyFrom(const Audio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rero.Audio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Audio::InternalSwap(Audio* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.raw_data_, &other->_impl_.raw_data_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Audio, _impl_.sample_rate_)
      + sizeof(Audio::_impl_.sample_rate_)
      - PROTOBUF_FIELD_OFFSET(Audio, _impl_.num_samples_)>(
          reinterpret_cast<char*>(&_impl_.num_samples_),
          reinterpret_cast<char*>(&other->_impl_.num_samples_));
}

::google::protobuf::Metadata Audio::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace rero
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_audio_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
