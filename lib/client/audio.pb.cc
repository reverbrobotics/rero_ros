// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: audio.proto

#include "audio.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace rero {
constexpr StreamRequest::StreamRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : format_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sample_rate_(0u)
  , num_channels_(0u)
  , frames_per_buffer_(0u)
  , bytes_per_sample_(0u){}
struct StreamRequestDefaultTypeInternal {
  constexpr StreamRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamRequestDefaultTypeInternal() {}
  union {
    StreamRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamRequestDefaultTypeInternal _StreamRequest_default_instance_;
constexpr Audio::Audio(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : raw_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , num_samples_(0u)
  , num_channels_(0u)
  , bytes_per_sample_(0u)
  , frames_per_buffer_(0u)
  , sample_rate_(0u){}
struct AudioDefaultTypeInternal {
  constexpr AudioDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AudioDefaultTypeInternal() {}
  union {
    Audio _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AudioDefaultTypeInternal _Audio_default_instance_;
}  // namespace rero
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_audio_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_audio_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_audio_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_audio_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rero::StreamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rero::StreamRequest, sample_rate_),
  PROTOBUF_FIELD_OFFSET(::rero::StreamRequest, num_channels_),
  PROTOBUF_FIELD_OFFSET(::rero::StreamRequest, format_),
  PROTOBUF_FIELD_OFFSET(::rero::StreamRequest, frames_per_buffer_),
  PROTOBUF_FIELD_OFFSET(::rero::StreamRequest, bytes_per_sample_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rero::Audio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rero::Audio, num_samples_),
  PROTOBUF_FIELD_OFFSET(::rero::Audio, num_channels_),
  PROTOBUF_FIELD_OFFSET(::rero::Audio, bytes_per_sample_),
  PROTOBUF_FIELD_OFFSET(::rero::Audio, frames_per_buffer_),
  PROTOBUF_FIELD_OFFSET(::rero::Audio, sample_rate_),
  PROTOBUF_FIELD_OFFSET(::rero::Audio, raw_data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::rero::StreamRequest)},
  { 10, -1, sizeof(::rero::Audio)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rero::_StreamRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rero::_Audio_default_instance_),
};

const char descriptor_table_protodef_audio_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013audio.proto\022\004rero\"\177\n\rStreamRequest\022\023\n\013"
  "sample_rate\030\001 \001(\r\022\024\n\014num_channels\030\002 \001(\r\022"
  "\016\n\006format\030\003 \001(\t\022\031\n\021frames_per_buffer\030\004 \001"
  "(\r\022\030\n\020bytes_per_sample\030\005 \001(\r\"\216\001\n\005Audio\022\023"
  "\n\013num_samples\030\001 \001(\r\022\024\n\014num_channels\030\002 \001("
  "\r\022\030\n\020bytes_per_sample\030\003 \001(\r\022\031\n\021frames_pe"
  "r_buffer\030\004 \001(\r\022\023\n\013sample_rate\030\005 \001(\r\022\020\n\010r"
  "aw_data\030\006 \001(\0142B\n\rAudioStreamer\0221\n\tGetStr"
  "eam\022\023.rero.StreamRequest\032\013.rero.Audio\"\0000"
  "\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_audio_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_audio_2eproto = {
  false, false, 369, descriptor_table_protodef_audio_2eproto, "audio.proto", 
  &descriptor_table_audio_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_audio_2eproto::offsets,
  file_level_metadata_audio_2eproto, file_level_enum_descriptors_audio_2eproto, file_level_service_descriptors_audio_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_audio_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_audio_2eproto);
  return descriptor_table_audio_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_audio_2eproto(&descriptor_table_audio_2eproto);
namespace rero {

// ===================================================================

class StreamRequest::_Internal {
 public:
};

StreamRequest::StreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rero.StreamRequest)
}
StreamRequest::StreamRequest(const StreamRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_format().empty()) {
    format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_format(), 
      GetArena());
  }
  ::memcpy(&sample_rate_, &from.sample_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&bytes_per_sample_) -
    reinterpret_cast<char*>(&sample_rate_)) + sizeof(bytes_per_sample_));
  // @@protoc_insertion_point(copy_constructor:rero.StreamRequest)
}

void StreamRequest::SharedCtor() {
format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sample_rate_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bytes_per_sample_) -
    reinterpret_cast<char*>(&sample_rate_)) + sizeof(bytes_per_sample_));
}

StreamRequest::~StreamRequest() {
  // @@protoc_insertion_point(destructor:rero.StreamRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StreamRequest::ArenaDtor(void* object) {
  StreamRequest* _this = reinterpret_cast< StreamRequest* >(object);
  (void)_this;
}
void StreamRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rero.StreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  format_.ClearToEmpty();
  ::memset(&sample_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bytes_per_sample_) -
      reinterpret_cast<char*>(&sample_rate_)) + sizeof(bytes_per_sample_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 sample_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sample_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_channels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rero.StreamRequest.format"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 frames_per_buffer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          frames_per_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bytes_per_sample = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          bytes_per_sample_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rero.StreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sample_rate = 1;
  if (this->sample_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sample_rate(), target);
  }

  // uint32 num_channels = 2;
  if (this->num_channels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_channels(), target);
  }

  // string format = 3;
  if (this->format().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_format().data(), static_cast<int>(this->_internal_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rero.StreamRequest.format");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_format(), target);
  }

  // uint32 frames_per_buffer = 4;
  if (this->frames_per_buffer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_frames_per_buffer(), target);
  }

  // uint32 bytes_per_sample = 5;
  if (this->bytes_per_sample() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_bytes_per_sample(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rero.StreamRequest)
  return target;
}

size_t StreamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rero.StreamRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string format = 3;
  if (this->format().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_format());
  }

  // uint32 sample_rate = 1;
  if (this->sample_rate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sample_rate());
  }

  // uint32 num_channels = 2;
  if (this->num_channels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_channels());
  }

  // uint32 frames_per_buffer = 4;
  if (this->frames_per_buffer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frames_per_buffer());
  }

  // uint32 bytes_per_sample = 5;
  if (this->bytes_per_sample() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bytes_per_sample());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rero.StreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rero.StreamRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rero.StreamRequest)
    MergeFrom(*source);
  }
}

void StreamRequest::MergeFrom(const StreamRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rero.StreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.format().size() > 0) {
    _internal_set_format(from._internal_format());
  }
  if (from.sample_rate() != 0) {
    _internal_set_sample_rate(from._internal_sample_rate());
  }
  if (from.num_channels() != 0) {
    _internal_set_num_channels(from._internal_num_channels());
  }
  if (from.frames_per_buffer() != 0) {
    _internal_set_frames_per_buffer(from._internal_frames_per_buffer());
  }
  if (from.bytes_per_sample() != 0) {
    _internal_set_bytes_per_sample(from._internal_bytes_per_sample());
  }
}

void StreamRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rero.StreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamRequest::CopyFrom(const StreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rero.StreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamRequest::IsInitialized() const {
  return true;
}

void StreamRequest::InternalSwap(StreamRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  format_.Swap(&other->format_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamRequest, bytes_per_sample_)
      + sizeof(StreamRequest::bytes_per_sample_)
      - PROTOBUF_FIELD_OFFSET(StreamRequest, sample_rate_)>(
          reinterpret_cast<char*>(&sample_rate_),
          reinterpret_cast<char*>(&other->sample_rate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Audio::_Internal {
 public:
};

Audio::Audio(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rero.Audio)
}
Audio::Audio(const Audio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  raw_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_raw_data().empty()) {
    raw_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_raw_data(), 
      GetArena());
  }
  ::memcpy(&num_samples_, &from.num_samples_,
    static_cast<size_t>(reinterpret_cast<char*>(&sample_rate_) -
    reinterpret_cast<char*>(&num_samples_)) + sizeof(sample_rate_));
  // @@protoc_insertion_point(copy_constructor:rero.Audio)
}

void Audio::SharedCtor() {
raw_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&num_samples_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sample_rate_) -
    reinterpret_cast<char*>(&num_samples_)) + sizeof(sample_rate_));
}

Audio::~Audio() {
  // @@protoc_insertion_point(destructor:rero.Audio)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Audio::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  raw_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Audio::ArenaDtor(void* object) {
  Audio* _this = reinterpret_cast< Audio* >(object);
  (void)_this;
}
void Audio::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Audio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Audio::Clear() {
// @@protoc_insertion_point(message_clear_start:rero.Audio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raw_data_.ClearToEmpty();
  ::memset(&num_samples_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_rate_) -
      reinterpret_cast<char*>(&num_samples_)) + sizeof(sample_rate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Audio::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 num_samples = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_channels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bytes_per_sample = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bytes_per_sample_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 frames_per_buffer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          frames_per_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sample_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          sample_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes raw_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_raw_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Audio::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rero.Audio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_samples = 1;
  if (this->num_samples() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_samples(), target);
  }

  // uint32 num_channels = 2;
  if (this->num_channels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_channels(), target);
  }

  // uint32 bytes_per_sample = 3;
  if (this->bytes_per_sample() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_bytes_per_sample(), target);
  }

  // uint32 frames_per_buffer = 4;
  if (this->frames_per_buffer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_frames_per_buffer(), target);
  }

  // uint32 sample_rate = 5;
  if (this->sample_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_sample_rate(), target);
  }

  // bytes raw_data = 6;
  if (this->raw_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_raw_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rero.Audio)
  return target;
}

size_t Audio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rero.Audio)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes raw_data = 6;
  if (this->raw_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_raw_data());
  }

  // uint32 num_samples = 1;
  if (this->num_samples() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_samples());
  }

  // uint32 num_channels = 2;
  if (this->num_channels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_channels());
  }

  // uint32 bytes_per_sample = 3;
  if (this->bytes_per_sample() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bytes_per_sample());
  }

  // uint32 frames_per_buffer = 4;
  if (this->frames_per_buffer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frames_per_buffer());
  }

  // uint32 sample_rate = 5;
  if (this->sample_rate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sample_rate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Audio::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rero.Audio)
  GOOGLE_DCHECK_NE(&from, this);
  const Audio* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Audio>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rero.Audio)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rero.Audio)
    MergeFrom(*source);
  }
}

void Audio::MergeFrom(const Audio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rero.Audio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.raw_data().size() > 0) {
    _internal_set_raw_data(from._internal_raw_data());
  }
  if (from.num_samples() != 0) {
    _internal_set_num_samples(from._internal_num_samples());
  }
  if (from.num_channels() != 0) {
    _internal_set_num_channels(from._internal_num_channels());
  }
  if (from.bytes_per_sample() != 0) {
    _internal_set_bytes_per_sample(from._internal_bytes_per_sample());
  }
  if (from.frames_per_buffer() != 0) {
    _internal_set_frames_per_buffer(from._internal_frames_per_buffer());
  }
  if (from.sample_rate() != 0) {
    _internal_set_sample_rate(from._internal_sample_rate());
  }
}

void Audio::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rero.Audio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Audio::CopyFrom(const Audio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rero.Audio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Audio::IsInitialized() const {
  return true;
}

void Audio::InternalSwap(Audio* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  raw_data_.Swap(&other->raw_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Audio, sample_rate_)
      + sizeof(Audio::sample_rate_)
      - PROTOBUF_FIELD_OFFSET(Audio, num_samples_)>(
          reinterpret_cast<char*>(&num_samples_),
          reinterpret_cast<char*>(&other->num_samples_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Audio::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rero
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rero::StreamRequest* Arena::CreateMaybeMessage< ::rero::StreamRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rero::StreamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rero::Audio* Arena::CreateMaybeMessage< ::rero::Audio >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rero::Audio >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
