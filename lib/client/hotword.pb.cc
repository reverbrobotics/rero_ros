// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hotword.proto

#include "hotword.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace rero {
template <typename>
PROTOBUF_CONSTEXPR HotwordResult::HotwordResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hotword_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.confidence_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HotwordResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HotwordResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HotwordResultDefaultTypeInternal() {}
  union {
    HotwordResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HotwordResultDefaultTypeInternal _HotwordResult_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RawEmbedding::RawEmbedding(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.embedding_)*/ {}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RawEmbeddingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RawEmbeddingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RawEmbeddingDefaultTypeInternal() {}
  union {
    RawEmbedding _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RawEmbeddingDefaultTypeInternal _RawEmbedding_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR HotwordEmbedding::HotwordEmbedding(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hotword_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.embedding_)*/nullptr} {}
struct HotwordEmbeddingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HotwordEmbeddingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HotwordEmbeddingDefaultTypeInternal() {}
  union {
    HotwordEmbedding _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HotwordEmbeddingDefaultTypeInternal _HotwordEmbedding_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Result::Result(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResultDefaultTypeInternal() {}
  union {
    Result _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResultDefaultTypeInternal _Result_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR HotwordFileName::HotwordFileName(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hotword_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.filename_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HotwordFileNameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HotwordFileNameDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HotwordFileNameDefaultTypeInternal() {}
  union {
    HotwordFileName _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HotwordFileNameDefaultTypeInternal _HotwordFileName_default_instance_;
}  // namespace rero
static ::_pb::Metadata file_level_metadata_hotword_2eproto[5];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_hotword_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_hotword_2eproto = nullptr;
const ::uint32_t TableStruct_hotword_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::rero::HotwordResult, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::rero::HotwordResult, _impl_.hotword_),
    PROTOBUF_FIELD_OFFSET(::rero::HotwordResult, _impl_.confidence_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::rero::RawEmbedding, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::rero::RawEmbedding, _impl_.embedding_),
    PROTOBUF_FIELD_OFFSET(::rero::HotwordEmbedding, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::rero::HotwordEmbedding, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::rero::HotwordEmbedding, _impl_.hotword_),
    PROTOBUF_FIELD_OFFSET(::rero::HotwordEmbedding, _impl_.embedding_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::rero::Result, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::rero::Result, _impl_.msg_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::rero::HotwordFileName, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::rero::HotwordFileName, _impl_.hotword_),
    PROTOBUF_FIELD_OFFSET(::rero::HotwordFileName, _impl_.filename_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::rero::HotwordResult)},
        { 10, -1, -1, sizeof(::rero::RawEmbedding)},
        { 19, 29, -1, sizeof(::rero::HotwordEmbedding)},
        { 31, -1, -1, sizeof(::rero::Result)},
        { 40, -1, -1, sizeof(::rero::HotwordFileName)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::rero::_HotwordResult_default_instance_._instance,
    &::rero::_RawEmbedding_default_instance_._instance,
    &::rero::_HotwordEmbedding_default_instance_._instance,
    &::rero::_Result_default_instance_._instance,
    &::rero::_HotwordFileName_default_instance_._instance,
};
const char descriptor_table_protodef_hotword_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\rhotword.proto\022\004rero\032\013audio.proto\"4\n\rHo"
    "twordResult\022\017\n\007hotword\030\001 \001(\t\022\022\n\nconfiden"
    "ce\030\002 \001(\002\"!\n\014RawEmbedding\022\021\n\tembedding\030\001 "
    "\003(\002\"J\n\020HotwordEmbedding\022\017\n\007hotword\030\001 \001(\t"
    "\022%\n\tembedding\030\002 \001(\0132\022.rero.RawEmbedding\""
    "\025\n\006Result\022\013\n\003msg\030\001 \001(\t\"4\n\017HotwordFileNam"
    "e\022\017\n\007hotword\030\001 \001(\t\022\020\n\010filename\030\002 \001(\t2\271\002\n"
    "\020HotwordDetection\022<\n\022StartHotwordStream\022"
    "\013.rero.Audio\032\023.rero.HotwordResult\"\000(\0010\001\022"
    "8\n\020RecognizeHotword\022\013.rero.Audio\032\023.rero."
    "HotwordResult\"\000(\001\0223\n\014GetEmbedding\022\013.rero"
    ".Audio\032\022.rero.RawEmbedding\"\000(\001\022\?\n\025AddEmb"
    "eddingToHotword\022\026.rero.HotwordEmbedding\032"
    "\014.rero.Result\"\000\0227\n\016PersistHotword\022\025.rero"
    ".HotwordFileName\032\014.rero.Result\"\000b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_hotword_2eproto_deps[1] =
    {
        &::descriptor_table_audio_2eproto,
};
static ::absl::once_flag descriptor_table_hotword_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_hotword_2eproto = {
    false,
    false,
    600,
    descriptor_table_protodef_hotword_2eproto,
    "hotword.proto",
    &descriptor_table_hotword_2eproto_once,
    descriptor_table_hotword_2eproto_deps,
    1,
    5,
    schemas,
    file_default_instances,
    TableStruct_hotword_2eproto::offsets,
    file_level_metadata_hotword_2eproto,
    file_level_enum_descriptors_hotword_2eproto,
    file_level_service_descriptors_hotword_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_hotword_2eproto_getter() {
  return &descriptor_table_hotword_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_hotword_2eproto(&descriptor_table_hotword_2eproto);
namespace rero {
// ===================================================================

class HotwordResult::_Internal {
 public:
};

HotwordResult::HotwordResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rero.HotwordResult)
}
HotwordResult::HotwordResult(const HotwordResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HotwordResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hotword_) {}

    , decltype(_impl_.confidence_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hotword_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hotword_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hotword().empty()) {
    _this->_impl_.hotword_.Set(from._internal_hotword(), _this->GetArenaForAllocation());
  }
  _this->_impl_.confidence_ = from._impl_.confidence_;
  // @@protoc_insertion_point(copy_constructor:rero.HotwordResult)
}

inline void HotwordResult::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.hotword_) {}

    , decltype(_impl_.confidence_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hotword_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hotword_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HotwordResult::~HotwordResult() {
  // @@protoc_insertion_point(destructor:rero.HotwordResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HotwordResult::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hotword_.Destroy();
}

void HotwordResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HotwordResult::Clear() {
// @@protoc_insertion_point(message_clear_start:rero.HotwordResult)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hotword_.ClearToEmpty();
  _impl_.confidence_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HotwordResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string hotword = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hotword();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rero.HotwordResult.hotword"));
        } else {
          goto handle_unusual;
        }
        continue;
      // float confidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 21)) {
          _impl_.confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HotwordResult::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rero.HotwordResult)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string hotword = 1;
  if (!this->_internal_hotword().empty()) {
    const std::string& _s = this->_internal_hotword();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "rero.HotwordResult.hotword");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // float confidence = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_confidence = this->_internal_confidence();
  ::uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rero.HotwordResult)
  return target;
}

::size_t HotwordResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rero.HotwordResult)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hotword = 1;
  if (!this->_internal_hotword().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_hotword());
  }

  // float confidence = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_confidence = this->_internal_confidence();
  ::uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HotwordResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HotwordResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HotwordResult::GetClassData() const { return &_class_data_; }


void HotwordResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HotwordResult*>(&to_msg);
  auto& from = static_cast<const HotwordResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rero.HotwordResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hotword().empty()) {
    _this->_internal_set_hotword(from._internal_hotword());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_confidence = from._internal_confidence();
  ::uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    _this->_internal_set_confidence(from._internal_confidence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HotwordResult::CopyFrom(const HotwordResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rero.HotwordResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HotwordResult::IsInitialized() const {
  return true;
}

void HotwordResult::InternalSwap(HotwordResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hotword_, lhs_arena,
                                       &other->_impl_.hotword_, rhs_arena);

  swap(_impl_.confidence_, other->_impl_.confidence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HotwordResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hotword_2eproto_getter, &descriptor_table_hotword_2eproto_once,
      file_level_metadata_hotword_2eproto[0]);
}
// ===================================================================

class RawEmbedding::_Internal {
 public:
};

RawEmbedding::RawEmbedding(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rero.RawEmbedding)
}
RawEmbedding::RawEmbedding(const RawEmbedding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RawEmbedding* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.embedding_) { from._impl_.embedding_ }

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rero.RawEmbedding)
}

inline void RawEmbedding::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.embedding_) { arena }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RawEmbedding::~RawEmbedding() {
  // @@protoc_insertion_point(destructor:rero.RawEmbedding)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RawEmbedding::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.embedding_.~RepeatedField();
}

void RawEmbedding::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RawEmbedding::Clear() {
// @@protoc_insertion_point(message_clear_start:rero.RawEmbedding)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_embedding()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawEmbedding::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float embedding = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_embedding(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 13) {
          _internal_add_embedding(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RawEmbedding::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rero.RawEmbedding)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float embedding = 1;
  if (this->_internal_embedding_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_embedding(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rero.RawEmbedding)
  return target;
}

::size_t RawEmbedding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rero.RawEmbedding)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float embedding = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_embedding_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RawEmbedding::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RawEmbedding::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RawEmbedding::GetClassData() const { return &_class_data_; }


void RawEmbedding::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RawEmbedding*>(&to_msg);
  auto& from = static_cast<const RawEmbedding&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rero.RawEmbedding)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.embedding_.MergeFrom(from._impl_.embedding_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RawEmbedding::CopyFrom(const RawEmbedding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rero.RawEmbedding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawEmbedding::IsInitialized() const {
  return true;
}

void RawEmbedding::InternalSwap(RawEmbedding* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.embedding_.InternalSwap(&other->_impl_.embedding_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RawEmbedding::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hotword_2eproto_getter, &descriptor_table_hotword_2eproto_once,
      file_level_metadata_hotword_2eproto[1]);
}
// ===================================================================

class HotwordEmbedding::_Internal {
 public:
  using HasBits = decltype(std::declval<HotwordEmbedding>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HotwordEmbedding, _impl_._has_bits_);
  static const ::rero::RawEmbedding& embedding(const HotwordEmbedding* msg);
  static void set_has_embedding(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::rero::RawEmbedding&
HotwordEmbedding::_Internal::embedding(const HotwordEmbedding* msg) {
  return *msg->_impl_.embedding_;
}
HotwordEmbedding::HotwordEmbedding(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rero.HotwordEmbedding)
}
HotwordEmbedding::HotwordEmbedding(const HotwordEmbedding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HotwordEmbedding* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hotword_) {}

    , decltype(_impl_.embedding_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hotword_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hotword_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hotword().empty()) {
    _this->_impl_.hotword_.Set(from._internal_hotword(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.embedding_ = new ::rero::RawEmbedding(*from._impl_.embedding_);
  }
  // @@protoc_insertion_point(copy_constructor:rero.HotwordEmbedding)
}

inline void HotwordEmbedding::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hotword_) {}

    , decltype(_impl_.embedding_){nullptr}
  };
  _impl_.hotword_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hotword_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HotwordEmbedding::~HotwordEmbedding() {
  // @@protoc_insertion_point(destructor:rero.HotwordEmbedding)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HotwordEmbedding::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hotword_.Destroy();
  if (this != internal_default_instance()) delete _impl_.embedding_;
}

void HotwordEmbedding::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HotwordEmbedding::Clear() {
// @@protoc_insertion_point(message_clear_start:rero.HotwordEmbedding)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hotword_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.embedding_ != nullptr);
    _impl_.embedding_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HotwordEmbedding::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string hotword = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hotword();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rero.HotwordEmbedding.hotword"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .rero.RawEmbedding embedding = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_embedding(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HotwordEmbedding::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rero.HotwordEmbedding)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string hotword = 1;
  if (!this->_internal_hotword().empty()) {
    const std::string& _s = this->_internal_hotword();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "rero.HotwordEmbedding.hotword");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .rero.RawEmbedding embedding = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::embedding(this),
        _Internal::embedding(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rero.HotwordEmbedding)
  return target;
}

::size_t HotwordEmbedding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rero.HotwordEmbedding)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hotword = 1;
  if (!this->_internal_hotword().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_hotword());
  }

  // .rero.RawEmbedding embedding = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.embedding_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HotwordEmbedding::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HotwordEmbedding::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HotwordEmbedding::GetClassData() const { return &_class_data_; }


void HotwordEmbedding::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HotwordEmbedding*>(&to_msg);
  auto& from = static_cast<const HotwordEmbedding&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rero.HotwordEmbedding)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hotword().empty()) {
    _this->_internal_set_hotword(from._internal_hotword());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_embedding()->::rero::RawEmbedding::MergeFrom(
        from._internal_embedding());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HotwordEmbedding::CopyFrom(const HotwordEmbedding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rero.HotwordEmbedding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HotwordEmbedding::IsInitialized() const {
  return true;
}

void HotwordEmbedding::InternalSwap(HotwordEmbedding* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hotword_, lhs_arena,
                                       &other->_impl_.hotword_, rhs_arena);
  swap(_impl_.embedding_, other->_impl_.embedding_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HotwordEmbedding::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hotword_2eproto_getter, &descriptor_table_hotword_2eproto_once,
      file_level_metadata_hotword_2eproto[2]);
}
// ===================================================================

class Result::_Internal {
 public:
};

Result::Result(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rero.Result)
}
Result::Result(const Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Result* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:rero.Result)
}

inline void Result::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:rero.Result)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Result::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
}

void Result::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:rero.Result)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Result::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rero.Result.msg"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Result::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rero.Result)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    const std::string& _s = this->_internal_msg();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "rero.Result.msg");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rero.Result)
  return target;
}

::size_t Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rero.Result)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Result::GetClassData() const { return &_class_data_; }


void Result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Result*>(&to_msg);
  auto& from = static_cast<const Result&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rero.Result)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rero.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  return true;
}

void Result::InternalSwap(Result* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.msg_, lhs_arena,
                                       &other->_impl_.msg_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Result::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hotword_2eproto_getter, &descriptor_table_hotword_2eproto_once,
      file_level_metadata_hotword_2eproto[3]);
}
// ===================================================================

class HotwordFileName::_Internal {
 public:
};

HotwordFileName::HotwordFileName(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rero.HotwordFileName)
}
HotwordFileName::HotwordFileName(const HotwordFileName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HotwordFileName* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hotword_) {}

    , decltype(_impl_.filename_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hotword_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hotword_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hotword().empty()) {
    _this->_impl_.hotword_.Set(from._internal_hotword(), _this->GetArenaForAllocation());
  }
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.filename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filename().empty()) {
    _this->_impl_.filename_.Set(from._internal_filename(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:rero.HotwordFileName)
}

inline void HotwordFileName::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.hotword_) {}

    , decltype(_impl_.filename_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hotword_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hotword_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.filename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HotwordFileName::~HotwordFileName() {
  // @@protoc_insertion_point(destructor:rero.HotwordFileName)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HotwordFileName::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hotword_.Destroy();
  _impl_.filename_.Destroy();
}

void HotwordFileName::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HotwordFileName::Clear() {
// @@protoc_insertion_point(message_clear_start:rero.HotwordFileName)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hotword_.ClearToEmpty();
  _impl_.filename_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HotwordFileName::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string hotword = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hotword();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rero.HotwordFileName.hotword"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string filename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rero.HotwordFileName.filename"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HotwordFileName::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rero.HotwordFileName)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string hotword = 1;
  if (!this->_internal_hotword().empty()) {
    const std::string& _s = this->_internal_hotword();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "rero.HotwordFileName.hotword");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string filename = 2;
  if (!this->_internal_filename().empty()) {
    const std::string& _s = this->_internal_filename();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "rero.HotwordFileName.filename");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rero.HotwordFileName)
  return target;
}

::size_t HotwordFileName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rero.HotwordFileName)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hotword = 1;
  if (!this->_internal_hotword().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_hotword());
  }

  // string filename = 2;
  if (!this->_internal_filename().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_filename());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HotwordFileName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HotwordFileName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HotwordFileName::GetClassData() const { return &_class_data_; }


void HotwordFileName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HotwordFileName*>(&to_msg);
  auto& from = static_cast<const HotwordFileName&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rero.HotwordFileName)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hotword().empty()) {
    _this->_internal_set_hotword(from._internal_hotword());
  }
  if (!from._internal_filename().empty()) {
    _this->_internal_set_filename(from._internal_filename());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HotwordFileName::CopyFrom(const HotwordFileName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rero.HotwordFileName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HotwordFileName::IsInitialized() const {
  return true;
}

void HotwordFileName::InternalSwap(HotwordFileName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hotword_, lhs_arena,
                                       &other->_impl_.hotword_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.filename_, lhs_arena,
                                       &other->_impl_.filename_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata HotwordFileName::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hotword_2eproto_getter, &descriptor_table_hotword_2eproto_once,
      file_level_metadata_hotword_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace rero
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rero::HotwordResult*
Arena::CreateMaybeMessage< ::rero::HotwordResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rero::HotwordResult >(arena);
}
template<> PROTOBUF_NOINLINE ::rero::RawEmbedding*
Arena::CreateMaybeMessage< ::rero::RawEmbedding >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rero::RawEmbedding >(arena);
}
template<> PROTOBUF_NOINLINE ::rero::HotwordEmbedding*
Arena::CreateMaybeMessage< ::rero::HotwordEmbedding >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rero::HotwordEmbedding >(arena);
}
template<> PROTOBUF_NOINLINE ::rero::Result*
Arena::CreateMaybeMessage< ::rero::Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rero::Result >(arena);
}
template<> PROTOBUF_NOINLINE ::rero::HotwordFileName*
Arena::CreateMaybeMessage< ::rero::HotwordFileName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rero::HotwordFileName >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
