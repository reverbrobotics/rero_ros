// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hotword.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_hotword_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_hotword_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "audio.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_hotword_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_hotword_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_hotword_2eproto;
namespace rero {
class HotwordEmbedding;
struct HotwordEmbeddingDefaultTypeInternal;
extern HotwordEmbeddingDefaultTypeInternal _HotwordEmbedding_default_instance_;
class HotwordFileName;
struct HotwordFileNameDefaultTypeInternal;
extern HotwordFileNameDefaultTypeInternal _HotwordFileName_default_instance_;
class HotwordResult;
struct HotwordResultDefaultTypeInternal;
extern HotwordResultDefaultTypeInternal _HotwordResult_default_instance_;
class RawEmbedding;
struct RawEmbeddingDefaultTypeInternal;
extern RawEmbeddingDefaultTypeInternal _RawEmbedding_default_instance_;
class Result;
struct ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
}  // namespace rero
PROTOBUF_NAMESPACE_OPEN
template <>
::rero::HotwordEmbedding* Arena::CreateMaybeMessage<::rero::HotwordEmbedding>(Arena*);
template <>
::rero::HotwordFileName* Arena::CreateMaybeMessage<::rero::HotwordFileName>(Arena*);
template <>
::rero::HotwordResult* Arena::CreateMaybeMessage<::rero::HotwordResult>(Arena*);
template <>
::rero::RawEmbedding* Arena::CreateMaybeMessage<::rero::RawEmbedding>(Arena*);
template <>
::rero::Result* Arena::CreateMaybeMessage<::rero::Result>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace rero {

// ===================================================================


// -------------------------------------------------------------------

class HotwordResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rero.HotwordResult) */ {
 public:
  inline HotwordResult() : HotwordResult(nullptr) {}
  ~HotwordResult() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HotwordResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HotwordResult(const HotwordResult& from);
  HotwordResult(HotwordResult&& from) noexcept
    : HotwordResult() {
    *this = ::std::move(from);
  }

  inline HotwordResult& operator=(const HotwordResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline HotwordResult& operator=(HotwordResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HotwordResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const HotwordResult* internal_default_instance() {
    return reinterpret_cast<const HotwordResult*>(
               &_HotwordResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HotwordResult& a, HotwordResult& b) {
    a.Swap(&b);
  }
  inline void Swap(HotwordResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HotwordResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HotwordResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HotwordResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HotwordResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HotwordResult& from) {
    HotwordResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HotwordResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rero.HotwordResult";
  }
  protected:
  explicit HotwordResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHotwordFieldNumber = 1,
    kConfidenceFieldNumber = 2,
  };
  // string hotword = 1;
  void clear_hotword() ;
  const std::string& hotword() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hotword(Arg_&& arg, Args_... args);
  std::string* mutable_hotword();
  PROTOBUF_NODISCARD std::string* release_hotword();
  void set_allocated_hotword(std::string* ptr);

  private:
  const std::string& _internal_hotword() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hotword(
      const std::string& value);
  std::string* _internal_mutable_hotword();

  public:
  // float confidence = 2;
  void clear_confidence() ;
  float confidence() const;
  void set_confidence(float value);

  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);

  public:
  // @@protoc_insertion_point(class_scope:rero.HotwordResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hotword_;
    float confidence_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hotword_2eproto;
};// -------------------------------------------------------------------

class RawEmbedding final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rero.RawEmbedding) */ {
 public:
  inline RawEmbedding() : RawEmbedding(nullptr) {}
  ~RawEmbedding() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RawEmbedding(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RawEmbedding(const RawEmbedding& from);
  RawEmbedding(RawEmbedding&& from) noexcept
    : RawEmbedding() {
    *this = ::std::move(from);
  }

  inline RawEmbedding& operator=(const RawEmbedding& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawEmbedding& operator=(RawEmbedding&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RawEmbedding& default_instance() {
    return *internal_default_instance();
  }
  static inline const RawEmbedding* internal_default_instance() {
    return reinterpret_cast<const RawEmbedding*>(
               &_RawEmbedding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RawEmbedding& a, RawEmbedding& b) {
    a.Swap(&b);
  }
  inline void Swap(RawEmbedding* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RawEmbedding* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RawEmbedding* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RawEmbedding>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RawEmbedding& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RawEmbedding& from) {
    RawEmbedding::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawEmbedding* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rero.RawEmbedding";
  }
  protected:
  explicit RawEmbedding(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmbeddingFieldNumber = 1,
  };
  // repeated float embedding = 1;
  int embedding_size() const;
  private:
  int _internal_embedding_size() const;

  public:
  void clear_embedding() ;
  float embedding(int index) const;
  void set_embedding(int index, float value);
  void add_embedding(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& embedding() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* mutable_embedding();

  private:
  float _internal_embedding(int index) const;
  void _internal_add_embedding(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& _internal_embedding() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* _internal_mutable_embedding();

  public:
  // @@protoc_insertion_point(class_scope:rero.RawEmbedding)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<float> embedding_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hotword_2eproto;
};// -------------------------------------------------------------------

class HotwordEmbedding final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rero.HotwordEmbedding) */ {
 public:
  inline HotwordEmbedding() : HotwordEmbedding(nullptr) {}
  ~HotwordEmbedding() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HotwordEmbedding(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HotwordEmbedding(const HotwordEmbedding& from);
  HotwordEmbedding(HotwordEmbedding&& from) noexcept
    : HotwordEmbedding() {
    *this = ::std::move(from);
  }

  inline HotwordEmbedding& operator=(const HotwordEmbedding& from) {
    CopyFrom(from);
    return *this;
  }
  inline HotwordEmbedding& operator=(HotwordEmbedding&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HotwordEmbedding& default_instance() {
    return *internal_default_instance();
  }
  static inline const HotwordEmbedding* internal_default_instance() {
    return reinterpret_cast<const HotwordEmbedding*>(
               &_HotwordEmbedding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HotwordEmbedding& a, HotwordEmbedding& b) {
    a.Swap(&b);
  }
  inline void Swap(HotwordEmbedding* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HotwordEmbedding* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HotwordEmbedding* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HotwordEmbedding>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HotwordEmbedding& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HotwordEmbedding& from) {
    HotwordEmbedding::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HotwordEmbedding* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rero.HotwordEmbedding";
  }
  protected:
  explicit HotwordEmbedding(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHotwordFieldNumber = 1,
    kEmbeddingFieldNumber = 2,
  };
  // string hotword = 1;
  void clear_hotword() ;
  const std::string& hotword() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hotword(Arg_&& arg, Args_... args);
  std::string* mutable_hotword();
  PROTOBUF_NODISCARD std::string* release_hotword();
  void set_allocated_hotword(std::string* ptr);

  private:
  const std::string& _internal_hotword() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hotword(
      const std::string& value);
  std::string* _internal_mutable_hotword();

  public:
  // .rero.RawEmbedding embedding = 2;
  bool has_embedding() const;
  void clear_embedding() ;
  const ::rero::RawEmbedding& embedding() const;
  PROTOBUF_NODISCARD ::rero::RawEmbedding* release_embedding();
  ::rero::RawEmbedding* mutable_embedding();
  void set_allocated_embedding(::rero::RawEmbedding* embedding);
  private:
  const ::rero::RawEmbedding& _internal_embedding() const;
  ::rero::RawEmbedding* _internal_mutable_embedding();
  public:
  void unsafe_arena_set_allocated_embedding(
      ::rero::RawEmbedding* embedding);
  ::rero::RawEmbedding* unsafe_arena_release_embedding();
  // @@protoc_insertion_point(class_scope:rero.HotwordEmbedding)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hotword_;
    ::rero::RawEmbedding* embedding_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hotword_2eproto;
};// -------------------------------------------------------------------

class Result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rero.Result) */ {
 public:
  inline Result() : Result(nullptr) {}
  ~Result() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Result(const Result& from);
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result& operator=(Result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }
  inline void Swap(Result* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Result* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Result& from) {
    Result::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rero.Result";
  }
  protected:
  explicit Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // string msg = 1;
  void clear_msg() ;
  const std::string& msg() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msg(Arg_&& arg, Args_... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* ptr);

  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(
      const std::string& value);
  std::string* _internal_mutable_msg();

  public:
  // @@protoc_insertion_point(class_scope:rero.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hotword_2eproto;
};// -------------------------------------------------------------------

class HotwordFileName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rero.HotwordFileName) */ {
 public:
  inline HotwordFileName() : HotwordFileName(nullptr) {}
  ~HotwordFileName() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HotwordFileName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HotwordFileName(const HotwordFileName& from);
  HotwordFileName(HotwordFileName&& from) noexcept
    : HotwordFileName() {
    *this = ::std::move(from);
  }

  inline HotwordFileName& operator=(const HotwordFileName& from) {
    CopyFrom(from);
    return *this;
  }
  inline HotwordFileName& operator=(HotwordFileName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HotwordFileName& default_instance() {
    return *internal_default_instance();
  }
  static inline const HotwordFileName* internal_default_instance() {
    return reinterpret_cast<const HotwordFileName*>(
               &_HotwordFileName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(HotwordFileName& a, HotwordFileName& b) {
    a.Swap(&b);
  }
  inline void Swap(HotwordFileName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HotwordFileName* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HotwordFileName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HotwordFileName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HotwordFileName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HotwordFileName& from) {
    HotwordFileName::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HotwordFileName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rero.HotwordFileName";
  }
  protected:
  explicit HotwordFileName(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHotwordFieldNumber = 1,
    kFilenameFieldNumber = 2,
  };
  // string hotword = 1;
  void clear_hotword() ;
  const std::string& hotword() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hotword(Arg_&& arg, Args_... args);
  std::string* mutable_hotword();
  PROTOBUF_NODISCARD std::string* release_hotword();
  void set_allocated_hotword(std::string* ptr);

  private:
  const std::string& _internal_hotword() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hotword(
      const std::string& value);
  std::string* _internal_mutable_hotword();

  public:
  // string filename = 2;
  void clear_filename() ;
  const std::string& filename() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* ptr);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // @@protoc_insertion_point(class_scope:rero.HotwordFileName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hotword_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hotword_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// HotwordResult

// string hotword = 1;
inline void HotwordResult::clear_hotword() {
  _impl_.hotword_.ClearToEmpty();
}
inline const std::string& HotwordResult::hotword() const {
  // @@protoc_insertion_point(field_get:rero.HotwordResult.hotword)
  return _internal_hotword();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HotwordResult::set_hotword(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.hotword_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rero.HotwordResult.hotword)
}
inline std::string* HotwordResult::mutable_hotword() {
  std::string* _s = _internal_mutable_hotword();
  // @@protoc_insertion_point(field_mutable:rero.HotwordResult.hotword)
  return _s;
}
inline const std::string& HotwordResult::_internal_hotword() const {
  return _impl_.hotword_.Get();
}
inline void HotwordResult::_internal_set_hotword(const std::string& value) {
  ;


  _impl_.hotword_.Set(value, GetArenaForAllocation());
}
inline std::string* HotwordResult::_internal_mutable_hotword() {
  ;
  return _impl_.hotword_.Mutable( GetArenaForAllocation());
}
inline std::string* HotwordResult::release_hotword() {
  // @@protoc_insertion_point(field_release:rero.HotwordResult.hotword)
  return _impl_.hotword_.Release();
}
inline void HotwordResult::set_allocated_hotword(std::string* value) {
  _impl_.hotword_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hotword_.IsDefault()) {
          _impl_.hotword_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rero.HotwordResult.hotword)
}

// float confidence = 2;
inline void HotwordResult::clear_confidence() {
  _impl_.confidence_ = 0;
}
inline float HotwordResult::confidence() const {
  // @@protoc_insertion_point(field_get:rero.HotwordResult.confidence)
  return _internal_confidence();
}
inline void HotwordResult::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:rero.HotwordResult.confidence)
}
inline float HotwordResult::_internal_confidence() const {
  return _impl_.confidence_;
}
inline void HotwordResult::_internal_set_confidence(float value) {
  ;
  _impl_.confidence_ = value;
}

// -------------------------------------------------------------------

// RawEmbedding

// repeated float embedding = 1;
inline int RawEmbedding::_internal_embedding_size() const {
  return _impl_.embedding_.size();
}
inline int RawEmbedding::embedding_size() const {
  return _internal_embedding_size();
}
inline void RawEmbedding::clear_embedding() {
  _internal_mutable_embedding()->Clear();
}
inline float RawEmbedding::embedding(int index) const {
  // @@protoc_insertion_point(field_get:rero.RawEmbedding.embedding)
  return _internal_embedding(index);
}
inline void RawEmbedding::set_embedding(int index, float value) {
  _internal_mutable_embedding()->Set(index, value);
  // @@protoc_insertion_point(field_set:rero.RawEmbedding.embedding)
}
inline void RawEmbedding::add_embedding(float value) {
  _internal_add_embedding(value);
  // @@protoc_insertion_point(field_add:rero.RawEmbedding.embedding)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& RawEmbedding::embedding() const {
  // @@protoc_insertion_point(field_list:rero.RawEmbedding.embedding)
  return _internal_embedding();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* RawEmbedding::mutable_embedding() {
  // @@protoc_insertion_point(field_mutable_list:rero.RawEmbedding.embedding)
  return _internal_mutable_embedding();
}

inline float RawEmbedding::_internal_embedding(int index) const {
  return _internal_embedding().Get(index);
}
inline void RawEmbedding::_internal_add_embedding(float value) {
  _internal_mutable_embedding()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& RawEmbedding::_internal_embedding() const {
  return _impl_.embedding_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* RawEmbedding::_internal_mutable_embedding() {
  return &_impl_.embedding_;
}

// -------------------------------------------------------------------

// HotwordEmbedding

// string hotword = 1;
inline void HotwordEmbedding::clear_hotword() {
  _impl_.hotword_.ClearToEmpty();
}
inline const std::string& HotwordEmbedding::hotword() const {
  // @@protoc_insertion_point(field_get:rero.HotwordEmbedding.hotword)
  return _internal_hotword();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HotwordEmbedding::set_hotword(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.hotword_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rero.HotwordEmbedding.hotword)
}
inline std::string* HotwordEmbedding::mutable_hotword() {
  std::string* _s = _internal_mutable_hotword();
  // @@protoc_insertion_point(field_mutable:rero.HotwordEmbedding.hotword)
  return _s;
}
inline const std::string& HotwordEmbedding::_internal_hotword() const {
  return _impl_.hotword_.Get();
}
inline void HotwordEmbedding::_internal_set_hotword(const std::string& value) {
  ;


  _impl_.hotword_.Set(value, GetArenaForAllocation());
}
inline std::string* HotwordEmbedding::_internal_mutable_hotword() {
  ;
  return _impl_.hotword_.Mutable( GetArenaForAllocation());
}
inline std::string* HotwordEmbedding::release_hotword() {
  // @@protoc_insertion_point(field_release:rero.HotwordEmbedding.hotword)
  return _impl_.hotword_.Release();
}
inline void HotwordEmbedding::set_allocated_hotword(std::string* value) {
  _impl_.hotword_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hotword_.IsDefault()) {
          _impl_.hotword_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rero.HotwordEmbedding.hotword)
}

// .rero.RawEmbedding embedding = 2;
inline bool HotwordEmbedding::has_embedding() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.embedding_ != nullptr);
  return value;
}
inline void HotwordEmbedding::clear_embedding() {
  if (_impl_.embedding_ != nullptr) _impl_.embedding_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::rero::RawEmbedding& HotwordEmbedding::_internal_embedding() const {
  const ::rero::RawEmbedding* p = _impl_.embedding_;
  return p != nullptr ? *p : reinterpret_cast<const ::rero::RawEmbedding&>(
      ::rero::_RawEmbedding_default_instance_);
}
inline const ::rero::RawEmbedding& HotwordEmbedding::embedding() const {
  // @@protoc_insertion_point(field_get:rero.HotwordEmbedding.embedding)
  return _internal_embedding();
}
inline void HotwordEmbedding::unsafe_arena_set_allocated_embedding(
    ::rero::RawEmbedding* embedding) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.embedding_);
  }
  _impl_.embedding_ = embedding;
  if (embedding) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rero.HotwordEmbedding.embedding)
}
inline ::rero::RawEmbedding* HotwordEmbedding::release_embedding() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::rero::RawEmbedding* temp = _impl_.embedding_;
  _impl_.embedding_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rero::RawEmbedding* HotwordEmbedding::unsafe_arena_release_embedding() {
  // @@protoc_insertion_point(field_release:rero.HotwordEmbedding.embedding)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::rero::RawEmbedding* temp = _impl_.embedding_;
  _impl_.embedding_ = nullptr;
  return temp;
}
inline ::rero::RawEmbedding* HotwordEmbedding::_internal_mutable_embedding() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.embedding_ == nullptr) {
    auto* p = CreateMaybeMessage<::rero::RawEmbedding>(GetArenaForAllocation());
    _impl_.embedding_ = p;
  }
  return _impl_.embedding_;
}
inline ::rero::RawEmbedding* HotwordEmbedding::mutable_embedding() {
  ::rero::RawEmbedding* _msg = _internal_mutable_embedding();
  // @@protoc_insertion_point(field_mutable:rero.HotwordEmbedding.embedding)
  return _msg;
}
inline void HotwordEmbedding::set_allocated_embedding(::rero::RawEmbedding* embedding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.embedding_;
  }
  if (embedding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(embedding);
    if (message_arena != submessage_arena) {
      embedding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, embedding, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.embedding_ = embedding;
  // @@protoc_insertion_point(field_set_allocated:rero.HotwordEmbedding.embedding)
}

// -------------------------------------------------------------------

// Result

// string msg = 1;
inline void Result::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& Result::msg() const {
  // @@protoc_insertion_point(field_get:rero.Result.msg)
  return _internal_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Result::set_msg(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.msg_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rero.Result.msg)
}
inline std::string* Result::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:rero.Result.msg)
  return _s;
}
inline const std::string& Result::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void Result::_internal_set_msg(const std::string& value) {
  ;


  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* Result::_internal_mutable_msg() {
  ;
  return _impl_.msg_.Mutable( GetArenaForAllocation());
}
inline std::string* Result::release_msg() {
  // @@protoc_insertion_point(field_release:rero.Result.msg)
  return _impl_.msg_.Release();
}
inline void Result::set_allocated_msg(std::string* value) {
  _impl_.msg_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.msg_.IsDefault()) {
          _impl_.msg_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rero.Result.msg)
}

// -------------------------------------------------------------------

// HotwordFileName

// string hotword = 1;
inline void HotwordFileName::clear_hotword() {
  _impl_.hotword_.ClearToEmpty();
}
inline const std::string& HotwordFileName::hotword() const {
  // @@protoc_insertion_point(field_get:rero.HotwordFileName.hotword)
  return _internal_hotword();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HotwordFileName::set_hotword(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.hotword_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rero.HotwordFileName.hotword)
}
inline std::string* HotwordFileName::mutable_hotword() {
  std::string* _s = _internal_mutable_hotword();
  // @@protoc_insertion_point(field_mutable:rero.HotwordFileName.hotword)
  return _s;
}
inline const std::string& HotwordFileName::_internal_hotword() const {
  return _impl_.hotword_.Get();
}
inline void HotwordFileName::_internal_set_hotword(const std::string& value) {
  ;


  _impl_.hotword_.Set(value, GetArenaForAllocation());
}
inline std::string* HotwordFileName::_internal_mutable_hotword() {
  ;
  return _impl_.hotword_.Mutable( GetArenaForAllocation());
}
inline std::string* HotwordFileName::release_hotword() {
  // @@protoc_insertion_point(field_release:rero.HotwordFileName.hotword)
  return _impl_.hotword_.Release();
}
inline void HotwordFileName::set_allocated_hotword(std::string* value) {
  _impl_.hotword_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hotword_.IsDefault()) {
          _impl_.hotword_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rero.HotwordFileName.hotword)
}

// string filename = 2;
inline void HotwordFileName::clear_filename() {
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& HotwordFileName::filename() const {
  // @@protoc_insertion_point(field_get:rero.HotwordFileName.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HotwordFileName::set_filename(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rero.HotwordFileName.filename)
}
inline std::string* HotwordFileName::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:rero.HotwordFileName.filename)
  return _s;
}
inline const std::string& HotwordFileName::_internal_filename() const {
  return _impl_.filename_.Get();
}
inline void HotwordFileName::_internal_set_filename(const std::string& value) {
  ;


  _impl_.filename_.Set(value, GetArenaForAllocation());
}
inline std::string* HotwordFileName::_internal_mutable_filename() {
  ;
  return _impl_.filename_.Mutable( GetArenaForAllocation());
}
inline std::string* HotwordFileName::release_filename() {
  // @@protoc_insertion_point(field_release:rero.HotwordFileName.filename)
  return _impl_.filename_.Release();
}
inline void HotwordFileName::set_allocated_filename(std::string* value) {
  _impl_.filename_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.filename_.IsDefault()) {
          _impl_.filename_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rero.HotwordFileName.filename)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace rero


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_hotword_2eproto_2epb_2eh
