// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: hotword.proto
// Protobuf C++ Version: 6.31.1

#ifndef hotword_2eproto_2epb_2eh
#define hotword_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "audio.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_hotword_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_hotword_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_hotword_2eproto;
}  // extern "C"
namespace rero {
class HotwordEmbedding;
struct HotwordEmbeddingDefaultTypeInternal;
extern HotwordEmbeddingDefaultTypeInternal _HotwordEmbedding_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull HotwordEmbedding_class_data_;
class HotwordFileName;
struct HotwordFileNameDefaultTypeInternal;
extern HotwordFileNameDefaultTypeInternal _HotwordFileName_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull HotwordFileName_class_data_;
class HotwordResult;
struct HotwordResultDefaultTypeInternal;
extern HotwordResultDefaultTypeInternal _HotwordResult_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull HotwordResult_class_data_;
class RawEmbedding;
struct RawEmbeddingDefaultTypeInternal;
extern RawEmbeddingDefaultTypeInternal _RawEmbedding_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull RawEmbedding_class_data_;
class Result;
struct ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Result_class_data_;
}  // namespace rero
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace rero {

// ===================================================================


// -------------------------------------------------------------------

class Result final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:rero.Result) */ {
 public:
  inline Result() : Result(nullptr) {}
  ~Result() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Result* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Result));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Result(::google::protobuf::internal::ConstantInitialized);

  inline Result(const Result& from) : Result(nullptr, from) {}
  inline Result(Result&& from) noexcept
      : Result(nullptr, ::std::move(from)) {}
  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result& operator=(Result&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Result& default_instance() {
    return *reinterpret_cast<const Result*>(
        &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Result& a, Result& b) { a.Swap(&b); }
  inline void Swap(Result* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Result* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Result* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Result>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Result& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Result& from) { Result::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Result* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "rero.Result"; }

 protected:
  explicit Result(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Result(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Result& from);
  Result(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Result&& from) noexcept
      : Result(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMsgFieldNumber = 1,
  };
  // string msg = 1;
  void clear_msg() ;
  const ::std::string& msg() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_msg(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_msg();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_msg();
  void set_allocated_msg(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_msg() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_msg();

  public:
  // @@protoc_insertion_point(class_scope:rero.Result)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   0, 23,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Result& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr msg_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hotword_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Result_class_data_;
// -------------------------------------------------------------------

class RawEmbedding final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:rero.RawEmbedding) */ {
 public:
  inline RawEmbedding() : RawEmbedding(nullptr) {}
  ~RawEmbedding() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RawEmbedding* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RawEmbedding));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RawEmbedding(::google::protobuf::internal::ConstantInitialized);

  inline RawEmbedding(const RawEmbedding& from) : RawEmbedding(nullptr, from) {}
  inline RawEmbedding(RawEmbedding&& from) noexcept
      : RawEmbedding(nullptr, ::std::move(from)) {}
  inline RawEmbedding& operator=(const RawEmbedding& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawEmbedding& operator=(RawEmbedding&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RawEmbedding& default_instance() {
    return *reinterpret_cast<const RawEmbedding*>(
        &_RawEmbedding_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(RawEmbedding& a, RawEmbedding& b) { a.Swap(&b); }
  inline void Swap(RawEmbedding* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RawEmbedding* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RawEmbedding* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RawEmbedding>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RawEmbedding& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RawEmbedding& from) { RawEmbedding::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RawEmbedding* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "rero.RawEmbedding"; }

 protected:
  explicit RawEmbedding(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  RawEmbedding(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const RawEmbedding& from);
  RawEmbedding(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, RawEmbedding&& from) noexcept
      : RawEmbedding(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEmbeddingFieldNumber = 1,
  };
  // repeated float embedding = 1;
  int embedding_size() const;
  private:
  int _internal_embedding_size() const;

  public:
  void clear_embedding() ;
  float embedding(int index) const;
  void set_embedding(int index, float value);
  void add_embedding(float value);
  const ::google::protobuf::RepeatedField<float>& embedding() const;
  ::google::protobuf::RepeatedField<float>* PROTOBUF_NONNULL mutable_embedding();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_embedding() const;
  ::google::protobuf::RepeatedField<float>* PROTOBUF_NONNULL _internal_mutable_embedding();

  public:
  // @@protoc_insertion_point(class_scope:rero.RawEmbedding)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const RawEmbedding& from_msg);
    ::google::protobuf::RepeatedField<float> embedding_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hotword_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull RawEmbedding_class_data_;
// -------------------------------------------------------------------

class HotwordResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:rero.HotwordResult) */ {
 public:
  inline HotwordResult() : HotwordResult(nullptr) {}
  ~HotwordResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HotwordResult* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HotwordResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HotwordResult(::google::protobuf::internal::ConstantInitialized);

  inline HotwordResult(const HotwordResult& from) : HotwordResult(nullptr, from) {}
  inline HotwordResult(HotwordResult&& from) noexcept
      : HotwordResult(nullptr, ::std::move(from)) {}
  inline HotwordResult& operator=(const HotwordResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline HotwordResult& operator=(HotwordResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HotwordResult& default_instance() {
    return *reinterpret_cast<const HotwordResult*>(
        &_HotwordResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(HotwordResult& a, HotwordResult& b) { a.Swap(&b); }
  inline void Swap(HotwordResult* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HotwordResult* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HotwordResult* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HotwordResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HotwordResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HotwordResult& from) { HotwordResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HotwordResult* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "rero.HotwordResult"; }

 protected:
  explicit HotwordResult(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  HotwordResult(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const HotwordResult& from);
  HotwordResult(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, HotwordResult&& from) noexcept
      : HotwordResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHotwordFieldNumber = 1,
    kConfidenceFieldNumber = 2,
  };
  // string hotword = 1;
  void clear_hotword() ;
  const ::std::string& hotword() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_hotword(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_hotword();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_hotword();
  void set_allocated_hotword(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_hotword() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_hotword(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_hotword();

  public:
  // float confidence = 2;
  void clear_confidence() ;
  float confidence() const;
  void set_confidence(float value);

  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);

  public:
  // @@protoc_insertion_point(class_scope:rero.HotwordResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 34,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const HotwordResult& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr hotword_;
    float confidence_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hotword_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull HotwordResult_class_data_;
// -------------------------------------------------------------------

class HotwordFileName final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:rero.HotwordFileName) */ {
 public:
  inline HotwordFileName() : HotwordFileName(nullptr) {}
  ~HotwordFileName() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HotwordFileName* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HotwordFileName));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HotwordFileName(::google::protobuf::internal::ConstantInitialized);

  inline HotwordFileName(const HotwordFileName& from) : HotwordFileName(nullptr, from) {}
  inline HotwordFileName(HotwordFileName&& from) noexcept
      : HotwordFileName(nullptr, ::std::move(from)) {}
  inline HotwordFileName& operator=(const HotwordFileName& from) {
    CopyFrom(from);
    return *this;
  }
  inline HotwordFileName& operator=(HotwordFileName&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HotwordFileName& default_instance() {
    return *reinterpret_cast<const HotwordFileName*>(
        &_HotwordFileName_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(HotwordFileName& a, HotwordFileName& b) { a.Swap(&b); }
  inline void Swap(HotwordFileName* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HotwordFileName* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HotwordFileName* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HotwordFileName>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HotwordFileName& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HotwordFileName& from) { HotwordFileName::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HotwordFileName* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "rero.HotwordFileName"; }

 protected:
  explicit HotwordFileName(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  HotwordFileName(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const HotwordFileName& from);
  HotwordFileName(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, HotwordFileName&& from) noexcept
      : HotwordFileName(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHotwordFieldNumber = 1,
    kFilenameFieldNumber = 2,
  };
  // string hotword = 1;
  void clear_hotword() ;
  const ::std::string& hotword() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_hotword(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_hotword();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_hotword();
  void set_allocated_hotword(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_hotword() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_hotword(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_hotword();

  public:
  // string filename = 2;
  void clear_filename() ;
  const ::std::string& filename() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_filename();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_filename();
  void set_allocated_filename(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_filename() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_filename();

  public:
  // @@protoc_insertion_point(class_scope:rero.HotwordFileName)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 44,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const HotwordFileName& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr hotword_;
    ::google::protobuf::internal::ArenaStringPtr filename_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hotword_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull HotwordFileName_class_data_;
// -------------------------------------------------------------------

class HotwordEmbedding final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:rero.HotwordEmbedding) */ {
 public:
  inline HotwordEmbedding() : HotwordEmbedding(nullptr) {}
  ~HotwordEmbedding() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HotwordEmbedding* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HotwordEmbedding));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HotwordEmbedding(::google::protobuf::internal::ConstantInitialized);

  inline HotwordEmbedding(const HotwordEmbedding& from) : HotwordEmbedding(nullptr, from) {}
  inline HotwordEmbedding(HotwordEmbedding&& from) noexcept
      : HotwordEmbedding(nullptr, ::std::move(from)) {}
  inline HotwordEmbedding& operator=(const HotwordEmbedding& from) {
    CopyFrom(from);
    return *this;
  }
  inline HotwordEmbedding& operator=(HotwordEmbedding&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HotwordEmbedding& default_instance() {
    return *reinterpret_cast<const HotwordEmbedding*>(
        &_HotwordEmbedding_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(HotwordEmbedding& a, HotwordEmbedding& b) { a.Swap(&b); }
  inline void Swap(HotwordEmbedding* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HotwordEmbedding* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HotwordEmbedding* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HotwordEmbedding>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HotwordEmbedding& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HotwordEmbedding& from) { HotwordEmbedding::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HotwordEmbedding* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "rero.HotwordEmbedding"; }

 protected:
  explicit HotwordEmbedding(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  HotwordEmbedding(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const HotwordEmbedding& from);
  HotwordEmbedding(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, HotwordEmbedding&& from) noexcept
      : HotwordEmbedding(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHotwordFieldNumber = 1,
    kEmbeddingFieldNumber = 2,
  };
  // string hotword = 1;
  void clear_hotword() ;
  const ::std::string& hotword() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_hotword(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_hotword();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_hotword();
  void set_allocated_hotword(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_hotword() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_hotword(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_hotword();

  public:
  // .rero.RawEmbedding embedding = 2;
  bool has_embedding() const;
  void clear_embedding() ;
  const ::rero::RawEmbedding& embedding() const;
  [[nodiscard]] ::rero::RawEmbedding* PROTOBUF_NULLABLE release_embedding();
  ::rero::RawEmbedding* PROTOBUF_NONNULL mutable_embedding();
  void set_allocated_embedding(::rero::RawEmbedding* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_embedding(::rero::RawEmbedding* PROTOBUF_NULLABLE value);
  ::rero::RawEmbedding* PROTOBUF_NULLABLE unsafe_arena_release_embedding();

  private:
  const ::rero::RawEmbedding& _internal_embedding() const;
  ::rero::RawEmbedding* PROTOBUF_NONNULL _internal_mutable_embedding();

  public:
  // @@protoc_insertion_point(class_scope:rero.HotwordEmbedding)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   1, 37,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const HotwordEmbedding& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr hotword_;
    ::rero::RawEmbedding* PROTOBUF_NULLABLE embedding_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hotword_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull HotwordEmbedding_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// HotwordResult

// string hotword = 1;
inline void HotwordResult::clear_hotword() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hotword_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& HotwordResult::hotword() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rero.HotwordResult.hotword)
  return _internal_hotword();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void HotwordResult::set_hotword(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hotword_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rero.HotwordResult.hotword)
}
inline ::std::string* PROTOBUF_NONNULL HotwordResult::mutable_hotword()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_hotword();
  // @@protoc_insertion_point(field_mutable:rero.HotwordResult.hotword)
  return _s;
}
inline const ::std::string& HotwordResult::_internal_hotword() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hotword_.Get();
}
inline void HotwordResult::_internal_set_hotword(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hotword_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL HotwordResult::_internal_mutable_hotword() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.hotword_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE HotwordResult::release_hotword() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rero.HotwordResult.hotword)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.hotword_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.hotword_.Set("", GetArena());
  }
  return released;
}
inline void HotwordResult::set_allocated_hotword(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.hotword_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.hotword_.IsDefault()) {
    _impl_.hotword_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:rero.HotwordResult.hotword)
}

// float confidence = 2;
inline void HotwordResult::clear_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.confidence_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float HotwordResult::confidence() const {
  // @@protoc_insertion_point(field_get:rero.HotwordResult.confidence)
  return _internal_confidence();
}
inline void HotwordResult::set_confidence(float value) {
  _internal_set_confidence(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:rero.HotwordResult.confidence)
}
inline float HotwordResult::_internal_confidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.confidence_;
}
inline void HotwordResult::_internal_set_confidence(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.confidence_ = value;
}

// -------------------------------------------------------------------

// RawEmbedding

// repeated float embedding = 1;
inline int RawEmbedding::_internal_embedding_size() const {
  return _internal_embedding().size();
}
inline int RawEmbedding::embedding_size() const {
  return _internal_embedding_size();
}
inline void RawEmbedding::clear_embedding() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.embedding_.Clear();
}
inline float RawEmbedding::embedding(int index) const {
  // @@protoc_insertion_point(field_get:rero.RawEmbedding.embedding)
  return _internal_embedding().Get(index);
}
inline void RawEmbedding::set_embedding(int index, float value) {
  _internal_mutable_embedding()->Set(index, value);
  // @@protoc_insertion_point(field_set:rero.RawEmbedding.embedding)
}
inline void RawEmbedding::add_embedding(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_embedding()->Add(value);
  // @@protoc_insertion_point(field_add:rero.RawEmbedding.embedding)
}
inline const ::google::protobuf::RepeatedField<float>& RawEmbedding::embedding() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:rero.RawEmbedding.embedding)
  return _internal_embedding();
}
inline ::google::protobuf::RepeatedField<float>* PROTOBUF_NONNULL RawEmbedding::mutable_embedding()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:rero.RawEmbedding.embedding)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_embedding();
}
inline const ::google::protobuf::RepeatedField<float>&
RawEmbedding::_internal_embedding() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.embedding_;
}
inline ::google::protobuf::RepeatedField<float>* PROTOBUF_NONNULL
RawEmbedding::_internal_mutable_embedding() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.embedding_;
}

// -------------------------------------------------------------------

// HotwordEmbedding

// string hotword = 1;
inline void HotwordEmbedding::clear_hotword() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hotword_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& HotwordEmbedding::hotword() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rero.HotwordEmbedding.hotword)
  return _internal_hotword();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void HotwordEmbedding::set_hotword(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hotword_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rero.HotwordEmbedding.hotword)
}
inline ::std::string* PROTOBUF_NONNULL HotwordEmbedding::mutable_hotword()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_hotword();
  // @@protoc_insertion_point(field_mutable:rero.HotwordEmbedding.hotword)
  return _s;
}
inline const ::std::string& HotwordEmbedding::_internal_hotword() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hotword_.Get();
}
inline void HotwordEmbedding::_internal_set_hotword(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hotword_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL HotwordEmbedding::_internal_mutable_hotword() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.hotword_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE HotwordEmbedding::release_hotword() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rero.HotwordEmbedding.hotword)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.hotword_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.hotword_.Set("", GetArena());
  }
  return released;
}
inline void HotwordEmbedding::set_allocated_hotword(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.hotword_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.hotword_.IsDefault()) {
    _impl_.hotword_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:rero.HotwordEmbedding.hotword)
}

// .rero.RawEmbedding embedding = 2;
inline bool HotwordEmbedding::has_embedding() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.embedding_ != nullptr);
  return value;
}
inline void HotwordEmbedding::clear_embedding() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.embedding_ != nullptr) _impl_.embedding_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::rero::RawEmbedding& HotwordEmbedding::_internal_embedding() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::rero::RawEmbedding* p = _impl_.embedding_;
  return p != nullptr ? *p : reinterpret_cast<const ::rero::RawEmbedding&>(::rero::_RawEmbedding_default_instance_);
}
inline const ::rero::RawEmbedding& HotwordEmbedding::embedding() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rero.HotwordEmbedding.embedding)
  return _internal_embedding();
}
inline void HotwordEmbedding::unsafe_arena_set_allocated_embedding(
    ::rero::RawEmbedding* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.embedding_);
  }
  _impl_.embedding_ = reinterpret_cast<::rero::RawEmbedding*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rero.HotwordEmbedding.embedding)
}
inline ::rero::RawEmbedding* PROTOBUF_NULLABLE HotwordEmbedding::release_embedding() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::rero::RawEmbedding* released = _impl_.embedding_;
  _impl_.embedding_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::rero::RawEmbedding* PROTOBUF_NULLABLE HotwordEmbedding::unsafe_arena_release_embedding() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rero.HotwordEmbedding.embedding)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::rero::RawEmbedding* temp = _impl_.embedding_;
  _impl_.embedding_ = nullptr;
  return temp;
}
inline ::rero::RawEmbedding* PROTOBUF_NONNULL HotwordEmbedding::_internal_mutable_embedding() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.embedding_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::rero::RawEmbedding>(GetArena());
    _impl_.embedding_ = reinterpret_cast<::rero::RawEmbedding*>(p);
  }
  return _impl_.embedding_;
}
inline ::rero::RawEmbedding* PROTOBUF_NONNULL HotwordEmbedding::mutable_embedding()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::rero::RawEmbedding* _msg = _internal_mutable_embedding();
  // @@protoc_insertion_point(field_mutable:rero.HotwordEmbedding.embedding)
  return _msg;
}
inline void HotwordEmbedding::set_allocated_embedding(::rero::RawEmbedding* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.embedding_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.embedding_ = reinterpret_cast<::rero::RawEmbedding*>(value);
  // @@protoc_insertion_point(field_set_allocated:rero.HotwordEmbedding.embedding)
}

// -------------------------------------------------------------------

// Result

// string msg = 1;
inline void Result::clear_msg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msg_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& Result::msg() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rero.Result.msg)
  return _internal_msg();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Result::set_msg(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.msg_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rero.Result.msg)
}
inline ::std::string* PROTOBUF_NONNULL Result::mutable_msg()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:rero.Result.msg)
  return _s;
}
inline const ::std::string& Result::_internal_msg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.msg_.Get();
}
inline void Result::_internal_set_msg(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.msg_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Result::_internal_mutable_msg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.msg_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Result::release_msg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rero.Result.msg)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.msg_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.msg_.Set("", GetArena());
  }
  return released;
}
inline void Result::set_allocated_msg(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.msg_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:rero.Result.msg)
}

// -------------------------------------------------------------------

// HotwordFileName

// string hotword = 1;
inline void HotwordFileName::clear_hotword() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hotword_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& HotwordFileName::hotword() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rero.HotwordFileName.hotword)
  return _internal_hotword();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void HotwordFileName::set_hotword(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hotword_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rero.HotwordFileName.hotword)
}
inline ::std::string* PROTOBUF_NONNULL HotwordFileName::mutable_hotword()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_hotword();
  // @@protoc_insertion_point(field_mutable:rero.HotwordFileName.hotword)
  return _s;
}
inline const ::std::string& HotwordFileName::_internal_hotword() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hotword_.Get();
}
inline void HotwordFileName::_internal_set_hotword(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hotword_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL HotwordFileName::_internal_mutable_hotword() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.hotword_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE HotwordFileName::release_hotword() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rero.HotwordFileName.hotword)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.hotword_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.hotword_.Set("", GetArena());
  }
  return released;
}
inline void HotwordFileName::set_allocated_hotword(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.hotword_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.hotword_.IsDefault()) {
    _impl_.hotword_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:rero.HotwordFileName.hotword)
}

// string filename = 2;
inline void HotwordFileName::clear_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& HotwordFileName::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rero.HotwordFileName.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void HotwordFileName::set_filename(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rero.HotwordFileName.filename)
}
inline ::std::string* PROTOBUF_NONNULL HotwordFileName::mutable_filename()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:rero.HotwordFileName.filename)
  return _s;
}
inline const ::std::string& HotwordFileName::_internal_filename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filename_.Get();
}
inline void HotwordFileName::_internal_set_filename(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.filename_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL HotwordFileName::_internal_mutable_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.filename_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE HotwordFileName::release_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rero.HotwordFileName.filename)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.filename_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.filename_.Set("", GetArena());
  }
  return released;
}
inline void HotwordFileName::set_allocated_filename(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.filename_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:rero.HotwordFileName.filename)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace rero


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // hotword_2eproto_2epb_2eh
