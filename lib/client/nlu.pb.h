// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nlu.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nlu_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_nlu_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_nlu_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nlu_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_nlu_2eproto;
namespace rero {
class Intent;
struct IntentDefaultTypeInternal;
extern IntentDefaultTypeInternal _Intent_default_instance_;
class NLURequest;
struct NLURequestDefaultTypeInternal;
extern NLURequestDefaultTypeInternal _NLURequest_default_instance_;
class Slot;
struct SlotDefaultTypeInternal;
extern SlotDefaultTypeInternal _Slot_default_instance_;
}  // namespace rero
PROTOBUF_NAMESPACE_OPEN
template <>
::rero::Intent* Arena::CreateMaybeMessage<::rero::Intent>(Arena*);
template <>
::rero::NLURequest* Arena::CreateMaybeMessage<::rero::NLURequest>(Arena*);
template <>
::rero::Slot* Arena::CreateMaybeMessage<::rero::Slot>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace rero {

// ===================================================================


// -------------------------------------------------------------------

class NLURequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rero.NLURequest) */ {
 public:
  inline NLURequest() : NLURequest(nullptr) {}
  ~NLURequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NLURequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NLURequest(const NLURequest& from);
  NLURequest(NLURequest&& from) noexcept
    : NLURequest() {
    *this = ::std::move(from);
  }

  inline NLURequest& operator=(const NLURequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NLURequest& operator=(NLURequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NLURequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NLURequest* internal_default_instance() {
    return reinterpret_cast<const NLURequest*>(
               &_NLURequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NLURequest& a, NLURequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NLURequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NLURequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NLURequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NLURequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NLURequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NLURequest& from) {
    NLURequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NLURequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rero.NLURequest";
  }
  protected:
  explicit NLURequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
  };
  // string request = 1;
  void clear_request() ;
  const std::string& request() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_request(Arg_&& arg, Args_... args);
  std::string* mutable_request();
  PROTOBUF_NODISCARD std::string* release_request();
  void set_allocated_request(std::string* ptr);

  private:
  const std::string& _internal_request() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request(
      const std::string& value);
  std::string* _internal_mutable_request();

  public:
  // @@protoc_insertion_point(class_scope:rero.NLURequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nlu_2eproto;
};// -------------------------------------------------------------------

class Intent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rero.Intent) */ {
 public:
  inline Intent() : Intent(nullptr) {}
  ~Intent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Intent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent(const Intent& from);
  Intent(Intent&& from) noexcept
    : Intent() {
    *this = ::std::move(from);
  }

  inline Intent& operator=(const Intent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent& operator=(Intent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Intent* internal_default_instance() {
    return reinterpret_cast<const Intent*>(
               &_Intent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Intent& a, Intent& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Intent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Intent& from) {
    Intent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rero.Intent";
  }
  protected:
  explicit Intent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlotsFieldNumber = 4,
    kInputTextFieldNumber = 1,
    kIntentNameFieldNumber = 2,
    kProbabilityFieldNumber = 3,
  };
  // repeated .rero.Slot slots = 4;
  int slots_size() const;
  private:
  int _internal_slots_size() const;

  public:
  void clear_slots() ;
  ::rero::Slot* mutable_slots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rero::Slot >*
      mutable_slots();
  private:
  const ::rero::Slot& _internal_slots(int index) const;
  ::rero::Slot* _internal_add_slots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::rero::Slot>& _internal_slots() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::rero::Slot>* _internal_mutable_slots();
  public:
  const ::rero::Slot& slots(int index) const;
  ::rero::Slot* add_slots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rero::Slot >&
      slots() const;
  // string inputText = 1;
  void clear_inputtext() ;
  const std::string& inputtext() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_inputtext(Arg_&& arg, Args_... args);
  std::string* mutable_inputtext();
  PROTOBUF_NODISCARD std::string* release_inputtext();
  void set_allocated_inputtext(std::string* ptr);

  private:
  const std::string& _internal_inputtext() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inputtext(
      const std::string& value);
  std::string* _internal_mutable_inputtext();

  public:
  // string intentName = 2;
  void clear_intentname() ;
  const std::string& intentname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_intentname(Arg_&& arg, Args_... args);
  std::string* mutable_intentname();
  PROTOBUF_NODISCARD std::string* release_intentname();
  void set_allocated_intentname(std::string* ptr);

  private:
  const std::string& _internal_intentname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_intentname(
      const std::string& value);
  std::string* _internal_mutable_intentname();

  public:
  // float probability = 3;
  void clear_probability() ;
  float probability() const;
  void set_probability(float value);

  private:
  float _internal_probability() const;
  void _internal_set_probability(float value);

  public:
  // @@protoc_insertion_point(class_scope:rero.Intent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rero::Slot > slots_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inputtext_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr intentname_;
    float probability_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nlu_2eproto;
};// -------------------------------------------------------------------

class Slot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rero.Slot) */ {
 public:
  inline Slot() : Slot(nullptr) {}
  ~Slot() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Slot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Slot(const Slot& from);
  Slot(Slot&& from) noexcept
    : Slot() {
    *this = ::std::move(from);
  }

  inline Slot& operator=(const Slot& from) {
    CopyFrom(from);
    return *this;
  }
  inline Slot& operator=(Slot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Slot& default_instance() {
    return *internal_default_instance();
  }
  static inline const Slot* internal_default_instance() {
    return reinterpret_cast<const Slot*>(
               &_Slot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Slot& a, Slot& b) {
    a.Swap(&b);
  }
  inline void Swap(Slot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Slot* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Slot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Slot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Slot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Slot& from) {
    Slot::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Slot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rero.Slot";
  }
  protected:
  explicit Slot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawValueFieldNumber = 1,
    kEntityFieldNumber = 2,
    kSlotNameFieldNumber = 3,
    kRangeStartFieldNumber = 4,
    kRangeEndFieldNumber = 5,
  };
  // string rawValue = 1;
  void clear_rawvalue() ;
  const std::string& rawvalue() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rawvalue(Arg_&& arg, Args_... args);
  std::string* mutable_rawvalue();
  PROTOBUF_NODISCARD std::string* release_rawvalue();
  void set_allocated_rawvalue(std::string* ptr);

  private:
  const std::string& _internal_rawvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rawvalue(
      const std::string& value);
  std::string* _internal_mutable_rawvalue();

  public:
  // string entity = 2;
  void clear_entity() ;
  const std::string& entity() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_entity(Arg_&& arg, Args_... args);
  std::string* mutable_entity();
  PROTOBUF_NODISCARD std::string* release_entity();
  void set_allocated_entity(std::string* ptr);

  private:
  const std::string& _internal_entity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entity(
      const std::string& value);
  std::string* _internal_mutable_entity();

  public:
  // string slotName = 3;
  void clear_slotname() ;
  const std::string& slotname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_slotname(Arg_&& arg, Args_... args);
  std::string* mutable_slotname();
  PROTOBUF_NODISCARD std::string* release_slotname();
  void set_allocated_slotname(std::string* ptr);

  private:
  const std::string& _internal_slotname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_slotname(
      const std::string& value);
  std::string* _internal_mutable_slotname();

  public:
  // uint32 rangeStart = 4;
  void clear_rangestart() ;
  ::uint32_t rangestart() const;
  void set_rangestart(::uint32_t value);

  private:
  ::uint32_t _internal_rangestart() const;
  void _internal_set_rangestart(::uint32_t value);

  public:
  // uint32 rangeEnd = 5;
  void clear_rangeend() ;
  ::uint32_t rangeend() const;
  void set_rangeend(::uint32_t value);

  private:
  ::uint32_t _internal_rangeend() const;
  void _internal_set_rangeend(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:rero.Slot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rawvalue_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slotname_;
    ::uint32_t rangestart_;
    ::uint32_t rangeend_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nlu_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// NLURequest

// string request = 1;
inline void NLURequest::clear_request() {
  _impl_.request_.ClearToEmpty();
}
inline const std::string& NLURequest::request() const {
  // @@protoc_insertion_point(field_get:rero.NLURequest.request)
  return _internal_request();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NLURequest::set_request(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.request_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rero.NLURequest.request)
}
inline std::string* NLURequest::mutable_request() {
  std::string* _s = _internal_mutable_request();
  // @@protoc_insertion_point(field_mutable:rero.NLURequest.request)
  return _s;
}
inline const std::string& NLURequest::_internal_request() const {
  return _impl_.request_.Get();
}
inline void NLURequest::_internal_set_request(const std::string& value) {
  ;


  _impl_.request_.Set(value, GetArenaForAllocation());
}
inline std::string* NLURequest::_internal_mutable_request() {
  ;
  return _impl_.request_.Mutable( GetArenaForAllocation());
}
inline std::string* NLURequest::release_request() {
  // @@protoc_insertion_point(field_release:rero.NLURequest.request)
  return _impl_.request_.Release();
}
inline void NLURequest::set_allocated_request(std::string* value) {
  _impl_.request_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.request_.IsDefault()) {
          _impl_.request_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rero.NLURequest.request)
}

// -------------------------------------------------------------------

// Intent

// string inputText = 1;
inline void Intent::clear_inputtext() {
  _impl_.inputtext_.ClearToEmpty();
}
inline const std::string& Intent::inputtext() const {
  // @@protoc_insertion_point(field_get:rero.Intent.inputText)
  return _internal_inputtext();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Intent::set_inputtext(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.inputtext_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rero.Intent.inputText)
}
inline std::string* Intent::mutable_inputtext() {
  std::string* _s = _internal_mutable_inputtext();
  // @@protoc_insertion_point(field_mutable:rero.Intent.inputText)
  return _s;
}
inline const std::string& Intent::_internal_inputtext() const {
  return _impl_.inputtext_.Get();
}
inline void Intent::_internal_set_inputtext(const std::string& value) {
  ;


  _impl_.inputtext_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent::_internal_mutable_inputtext() {
  ;
  return _impl_.inputtext_.Mutable( GetArenaForAllocation());
}
inline std::string* Intent::release_inputtext() {
  // @@protoc_insertion_point(field_release:rero.Intent.inputText)
  return _impl_.inputtext_.Release();
}
inline void Intent::set_allocated_inputtext(std::string* value) {
  _impl_.inputtext_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.inputtext_.IsDefault()) {
          _impl_.inputtext_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rero.Intent.inputText)
}

// string intentName = 2;
inline void Intent::clear_intentname() {
  _impl_.intentname_.ClearToEmpty();
}
inline const std::string& Intent::intentname() const {
  // @@protoc_insertion_point(field_get:rero.Intent.intentName)
  return _internal_intentname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Intent::set_intentname(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.intentname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rero.Intent.intentName)
}
inline std::string* Intent::mutable_intentname() {
  std::string* _s = _internal_mutable_intentname();
  // @@protoc_insertion_point(field_mutable:rero.Intent.intentName)
  return _s;
}
inline const std::string& Intent::_internal_intentname() const {
  return _impl_.intentname_.Get();
}
inline void Intent::_internal_set_intentname(const std::string& value) {
  ;


  _impl_.intentname_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent::_internal_mutable_intentname() {
  ;
  return _impl_.intentname_.Mutable( GetArenaForAllocation());
}
inline std::string* Intent::release_intentname() {
  // @@protoc_insertion_point(field_release:rero.Intent.intentName)
  return _impl_.intentname_.Release();
}
inline void Intent::set_allocated_intentname(std::string* value) {
  _impl_.intentname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.intentname_.IsDefault()) {
          _impl_.intentname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rero.Intent.intentName)
}

// float probability = 3;
inline void Intent::clear_probability() {
  _impl_.probability_ = 0;
}
inline float Intent::probability() const {
  // @@protoc_insertion_point(field_get:rero.Intent.probability)
  return _internal_probability();
}
inline void Intent::set_probability(float value) {
  _internal_set_probability(value);
  // @@protoc_insertion_point(field_set:rero.Intent.probability)
}
inline float Intent::_internal_probability() const {
  return _impl_.probability_;
}
inline void Intent::_internal_set_probability(float value) {
  ;
  _impl_.probability_ = value;
}

// repeated .rero.Slot slots = 4;
inline int Intent::_internal_slots_size() const {
  return _impl_.slots_.size();
}
inline int Intent::slots_size() const {
  return _internal_slots_size();
}
inline void Intent::clear_slots() {
  _internal_mutable_slots()->Clear();
}
inline ::rero::Slot* Intent::mutable_slots(int index) {
  // @@protoc_insertion_point(field_mutable:rero.Intent.slots)
  return _internal_mutable_slots()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rero::Slot >*
Intent::mutable_slots() {
  // @@protoc_insertion_point(field_mutable_list:rero.Intent.slots)
  return _internal_mutable_slots();
}
inline const ::rero::Slot& Intent::_internal_slots(int index) const {
  return _internal_slots().Get(index);
}
inline const ::rero::Slot& Intent::slots(int index) const {
  // @@protoc_insertion_point(field_get:rero.Intent.slots)
  return _internal_slots(index);
}
inline ::rero::Slot* Intent::_internal_add_slots() {
  return _internal_mutable_slots()->Add();
}
inline ::rero::Slot* Intent::add_slots() {
  ::rero::Slot* _add = _internal_add_slots();
  // @@protoc_insertion_point(field_add:rero.Intent.slots)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rero::Slot >&
Intent::slots() const {
  // @@protoc_insertion_point(field_list:rero.Intent.slots)
  return _internal_slots();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::rero::Slot>&
Intent::_internal_slots() const {
  return _impl_.slots_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::rero::Slot>*
Intent::_internal_mutable_slots() {
  return &_impl_.slots_;
}

// -------------------------------------------------------------------

// Slot

// string rawValue = 1;
inline void Slot::clear_rawvalue() {
  _impl_.rawvalue_.ClearToEmpty();
}
inline const std::string& Slot::rawvalue() const {
  // @@protoc_insertion_point(field_get:rero.Slot.rawValue)
  return _internal_rawvalue();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Slot::set_rawvalue(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.rawvalue_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rero.Slot.rawValue)
}
inline std::string* Slot::mutable_rawvalue() {
  std::string* _s = _internal_mutable_rawvalue();
  // @@protoc_insertion_point(field_mutable:rero.Slot.rawValue)
  return _s;
}
inline const std::string& Slot::_internal_rawvalue() const {
  return _impl_.rawvalue_.Get();
}
inline void Slot::_internal_set_rawvalue(const std::string& value) {
  ;


  _impl_.rawvalue_.Set(value, GetArenaForAllocation());
}
inline std::string* Slot::_internal_mutable_rawvalue() {
  ;
  return _impl_.rawvalue_.Mutable( GetArenaForAllocation());
}
inline std::string* Slot::release_rawvalue() {
  // @@protoc_insertion_point(field_release:rero.Slot.rawValue)
  return _impl_.rawvalue_.Release();
}
inline void Slot::set_allocated_rawvalue(std::string* value) {
  _impl_.rawvalue_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.rawvalue_.IsDefault()) {
          _impl_.rawvalue_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rero.Slot.rawValue)
}

// string entity = 2;
inline void Slot::clear_entity() {
  _impl_.entity_.ClearToEmpty();
}
inline const std::string& Slot::entity() const {
  // @@protoc_insertion_point(field_get:rero.Slot.entity)
  return _internal_entity();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Slot::set_entity(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.entity_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rero.Slot.entity)
}
inline std::string* Slot::mutable_entity() {
  std::string* _s = _internal_mutable_entity();
  // @@protoc_insertion_point(field_mutable:rero.Slot.entity)
  return _s;
}
inline const std::string& Slot::_internal_entity() const {
  return _impl_.entity_.Get();
}
inline void Slot::_internal_set_entity(const std::string& value) {
  ;


  _impl_.entity_.Set(value, GetArenaForAllocation());
}
inline std::string* Slot::_internal_mutable_entity() {
  ;
  return _impl_.entity_.Mutable( GetArenaForAllocation());
}
inline std::string* Slot::release_entity() {
  // @@protoc_insertion_point(field_release:rero.Slot.entity)
  return _impl_.entity_.Release();
}
inline void Slot::set_allocated_entity(std::string* value) {
  _impl_.entity_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.entity_.IsDefault()) {
          _impl_.entity_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rero.Slot.entity)
}

// string slotName = 3;
inline void Slot::clear_slotname() {
  _impl_.slotname_.ClearToEmpty();
}
inline const std::string& Slot::slotname() const {
  // @@protoc_insertion_point(field_get:rero.Slot.slotName)
  return _internal_slotname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Slot::set_slotname(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.slotname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rero.Slot.slotName)
}
inline std::string* Slot::mutable_slotname() {
  std::string* _s = _internal_mutable_slotname();
  // @@protoc_insertion_point(field_mutable:rero.Slot.slotName)
  return _s;
}
inline const std::string& Slot::_internal_slotname() const {
  return _impl_.slotname_.Get();
}
inline void Slot::_internal_set_slotname(const std::string& value) {
  ;


  _impl_.slotname_.Set(value, GetArenaForAllocation());
}
inline std::string* Slot::_internal_mutable_slotname() {
  ;
  return _impl_.slotname_.Mutable( GetArenaForAllocation());
}
inline std::string* Slot::release_slotname() {
  // @@protoc_insertion_point(field_release:rero.Slot.slotName)
  return _impl_.slotname_.Release();
}
inline void Slot::set_allocated_slotname(std::string* value) {
  _impl_.slotname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.slotname_.IsDefault()) {
          _impl_.slotname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rero.Slot.slotName)
}

// uint32 rangeStart = 4;
inline void Slot::clear_rangestart() {
  _impl_.rangestart_ = 0u;
}
inline ::uint32_t Slot::rangestart() const {
  // @@protoc_insertion_point(field_get:rero.Slot.rangeStart)
  return _internal_rangestart();
}
inline void Slot::set_rangestart(::uint32_t value) {
  _internal_set_rangestart(value);
  // @@protoc_insertion_point(field_set:rero.Slot.rangeStart)
}
inline ::uint32_t Slot::_internal_rangestart() const {
  return _impl_.rangestart_;
}
inline void Slot::_internal_set_rangestart(::uint32_t value) {
  ;
  _impl_.rangestart_ = value;
}

// uint32 rangeEnd = 5;
inline void Slot::clear_rangeend() {
  _impl_.rangeend_ = 0u;
}
inline ::uint32_t Slot::rangeend() const {
  // @@protoc_insertion_point(field_get:rero.Slot.rangeEnd)
  return _internal_rangeend();
}
inline void Slot::set_rangeend(::uint32_t value) {
  _internal_set_rangeend(value);
  // @@protoc_insertion_point(field_set:rero.Slot.rangeEnd)
}
inline ::uint32_t Slot::_internal_rangeend() const {
  return _impl_.rangeend_;
}
inline void Slot::_internal_set_rangeend(::uint32_t value) {
  ;
  _impl_.rangeend_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace rero


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_nlu_2eproto_2epb_2eh
