// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nlu.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nlu_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_nlu_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nlu_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nlu_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nlu_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_nlu_2eproto_metadata_getter(int index);
namespace rero {
class Intent;
struct IntentDefaultTypeInternal;
extern IntentDefaultTypeInternal _Intent_default_instance_;
class NLURequest;
struct NLURequestDefaultTypeInternal;
extern NLURequestDefaultTypeInternal _NLURequest_default_instance_;
class Slot;
struct SlotDefaultTypeInternal;
extern SlotDefaultTypeInternal _Slot_default_instance_;
}  // namespace rero
PROTOBUF_NAMESPACE_OPEN
template<> ::rero::Intent* Arena::CreateMaybeMessage<::rero::Intent>(Arena*);
template<> ::rero::NLURequest* Arena::CreateMaybeMessage<::rero::NLURequest>(Arena*);
template<> ::rero::Slot* Arena::CreateMaybeMessage<::rero::Slot>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rero {

// ===================================================================

class NLURequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rero.NLURequest) */ {
 public:
  inline NLURequest() : NLURequest(nullptr) {}
  virtual ~NLURequest();
  explicit constexpr NLURequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NLURequest(const NLURequest& from);
  NLURequest(NLURequest&& from) noexcept
    : NLURequest() {
    *this = ::std::move(from);
  }

  inline NLURequest& operator=(const NLURequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NLURequest& operator=(NLURequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NLURequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NLURequest* internal_default_instance() {
    return reinterpret_cast<const NLURequest*>(
               &_NLURequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NLURequest& a, NLURequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NLURequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NLURequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NLURequest* New() const final {
    return CreateMaybeMessage<NLURequest>(nullptr);
  }

  NLURequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NLURequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NLURequest& from);
  void MergeFrom(const NLURequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NLURequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rero.NLURequest";
  }
  protected:
  explicit NLURequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_nlu_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
  };
  // string request = 1;
  void clear_request();
  const std::string& request() const;
  void set_request(const std::string& value);
  void set_request(std::string&& value);
  void set_request(const char* value);
  void set_request(const char* value, size_t size);
  std::string* mutable_request();
  std::string* release_request();
  void set_allocated_request(std::string* request);
  private:
  const std::string& _internal_request() const;
  void _internal_set_request(const std::string& value);
  std::string* _internal_mutable_request();
  public:

  // @@protoc_insertion_point(class_scope:rero.NLURequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nlu_2eproto;
};
// -------------------------------------------------------------------

class Intent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rero.Intent) */ {
 public:
  inline Intent() : Intent(nullptr) {}
  virtual ~Intent();
  explicit constexpr Intent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent(const Intent& from);
  Intent(Intent&& from) noexcept
    : Intent() {
    *this = ::std::move(from);
  }

  inline Intent& operator=(const Intent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent& operator=(Intent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Intent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Intent* internal_default_instance() {
    return reinterpret_cast<const Intent*>(
               &_Intent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Intent& a, Intent& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Intent* New() const final {
    return CreateMaybeMessage<Intent>(nullptr);
  }

  Intent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Intent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Intent& from);
  void MergeFrom(const Intent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rero.Intent";
  }
  protected:
  explicit Intent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_nlu_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlotsFieldNumber = 4,
    kInputTextFieldNumber = 1,
    kIntentNameFieldNumber = 2,
    kProbabilityFieldNumber = 3,
  };
  // repeated .rero.Slot slots = 4;
  int slots_size() const;
  private:
  int _internal_slots_size() const;
  public:
  void clear_slots();
  ::rero::Slot* mutable_slots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rero::Slot >*
      mutable_slots();
  private:
  const ::rero::Slot& _internal_slots(int index) const;
  ::rero::Slot* _internal_add_slots();
  public:
  const ::rero::Slot& slots(int index) const;
  ::rero::Slot* add_slots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rero::Slot >&
      slots() const;

  // string inputText = 1;
  void clear_inputtext();
  const std::string& inputtext() const;
  void set_inputtext(const std::string& value);
  void set_inputtext(std::string&& value);
  void set_inputtext(const char* value);
  void set_inputtext(const char* value, size_t size);
  std::string* mutable_inputtext();
  std::string* release_inputtext();
  void set_allocated_inputtext(std::string* inputtext);
  private:
  const std::string& _internal_inputtext() const;
  void _internal_set_inputtext(const std::string& value);
  std::string* _internal_mutable_inputtext();
  public:

  // string intentName = 2;
  void clear_intentname();
  const std::string& intentname() const;
  void set_intentname(const std::string& value);
  void set_intentname(std::string&& value);
  void set_intentname(const char* value);
  void set_intentname(const char* value, size_t size);
  std::string* mutable_intentname();
  std::string* release_intentname();
  void set_allocated_intentname(std::string* intentname);
  private:
  const std::string& _internal_intentname() const;
  void _internal_set_intentname(const std::string& value);
  std::string* _internal_mutable_intentname();
  public:

  // float probability = 3;
  void clear_probability();
  float probability() const;
  void set_probability(float value);
  private:
  float _internal_probability() const;
  void _internal_set_probability(float value);
  public:

  // @@protoc_insertion_point(class_scope:rero.Intent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rero::Slot > slots_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inputtext_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr intentname_;
  float probability_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nlu_2eproto;
};
// -------------------------------------------------------------------

class Slot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rero.Slot) */ {
 public:
  inline Slot() : Slot(nullptr) {}
  virtual ~Slot();
  explicit constexpr Slot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Slot(const Slot& from);
  Slot(Slot&& from) noexcept
    : Slot() {
    *this = ::std::move(from);
  }

  inline Slot& operator=(const Slot& from) {
    CopyFrom(from);
    return *this;
  }
  inline Slot& operator=(Slot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Slot& default_instance() {
    return *internal_default_instance();
  }
  static inline const Slot* internal_default_instance() {
    return reinterpret_cast<const Slot*>(
               &_Slot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Slot& a, Slot& b) {
    a.Swap(&b);
  }
  inline void Swap(Slot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Slot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Slot* New() const final {
    return CreateMaybeMessage<Slot>(nullptr);
  }

  Slot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Slot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Slot& from);
  void MergeFrom(const Slot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Slot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rero.Slot";
  }
  protected:
  explicit Slot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_nlu_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawValueFieldNumber = 1,
    kEntityFieldNumber = 2,
    kSlotNameFieldNumber = 3,
    kRangeStartFieldNumber = 4,
    kRangeEndFieldNumber = 5,
  };
  // string rawValue = 1;
  void clear_rawvalue();
  const std::string& rawvalue() const;
  void set_rawvalue(const std::string& value);
  void set_rawvalue(std::string&& value);
  void set_rawvalue(const char* value);
  void set_rawvalue(const char* value, size_t size);
  std::string* mutable_rawvalue();
  std::string* release_rawvalue();
  void set_allocated_rawvalue(std::string* rawvalue);
  private:
  const std::string& _internal_rawvalue() const;
  void _internal_set_rawvalue(const std::string& value);
  std::string* _internal_mutable_rawvalue();
  public:

  // string entity = 2;
  void clear_entity();
  const std::string& entity() const;
  void set_entity(const std::string& value);
  void set_entity(std::string&& value);
  void set_entity(const char* value);
  void set_entity(const char* value, size_t size);
  std::string* mutable_entity();
  std::string* release_entity();
  void set_allocated_entity(std::string* entity);
  private:
  const std::string& _internal_entity() const;
  void _internal_set_entity(const std::string& value);
  std::string* _internal_mutable_entity();
  public:

  // string slotName = 3;
  void clear_slotname();
  const std::string& slotname() const;
  void set_slotname(const std::string& value);
  void set_slotname(std::string&& value);
  void set_slotname(const char* value);
  void set_slotname(const char* value, size_t size);
  std::string* mutable_slotname();
  std::string* release_slotname();
  void set_allocated_slotname(std::string* slotname);
  private:
  const std::string& _internal_slotname() const;
  void _internal_set_slotname(const std::string& value);
  std::string* _internal_mutable_slotname();
  public:

  // uint32 rangeStart = 4;
  void clear_rangestart();
  ::PROTOBUF_NAMESPACE_ID::uint32 rangestart() const;
  void set_rangestart(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rangestart() const;
  void _internal_set_rangestart(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 rangeEnd = 5;
  void clear_rangeend();
  ::PROTOBUF_NAMESPACE_ID::uint32 rangeend() const;
  void set_rangeend(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rangeend() const;
  void _internal_set_rangeend(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:rero.Slot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rawvalue_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slotname_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rangestart_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rangeend_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nlu_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NLURequest

// string request = 1;
inline void NLURequest::clear_request() {
  request_.ClearToEmpty();
}
inline const std::string& NLURequest::request() const {
  // @@protoc_insertion_point(field_get:rero.NLURequest.request)
  return _internal_request();
}
inline void NLURequest::set_request(const std::string& value) {
  _internal_set_request(value);
  // @@protoc_insertion_point(field_set:rero.NLURequest.request)
}
inline std::string* NLURequest::mutable_request() {
  // @@protoc_insertion_point(field_mutable:rero.NLURequest.request)
  return _internal_mutable_request();
}
inline const std::string& NLURequest::_internal_request() const {
  return request_.Get();
}
inline void NLURequest::_internal_set_request(const std::string& value) {
  
  request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NLURequest::set_request(std::string&& value) {
  
  request_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rero.NLURequest.request)
}
inline void NLURequest::set_request(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:rero.NLURequest.request)
}
inline void NLURequest::set_request(const char* value,
    size_t size) {
  
  request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rero.NLURequest.request)
}
inline std::string* NLURequest::_internal_mutable_request() {
  
  return request_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NLURequest::release_request() {
  // @@protoc_insertion_point(field_release:rero.NLURequest.request)
  return request_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NLURequest::set_allocated_request(std::string* request) {
  if (request != nullptr) {
    
  } else {
    
  }
  request_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rero.NLURequest.request)
}

// -------------------------------------------------------------------

// Intent

// string inputText = 1;
inline void Intent::clear_inputtext() {
  inputtext_.ClearToEmpty();
}
inline const std::string& Intent::inputtext() const {
  // @@protoc_insertion_point(field_get:rero.Intent.inputText)
  return _internal_inputtext();
}
inline void Intent::set_inputtext(const std::string& value) {
  _internal_set_inputtext(value);
  // @@protoc_insertion_point(field_set:rero.Intent.inputText)
}
inline std::string* Intent::mutable_inputtext() {
  // @@protoc_insertion_point(field_mutable:rero.Intent.inputText)
  return _internal_mutable_inputtext();
}
inline const std::string& Intent::_internal_inputtext() const {
  return inputtext_.Get();
}
inline void Intent::_internal_set_inputtext(const std::string& value) {
  
  inputtext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Intent::set_inputtext(std::string&& value) {
  
  inputtext_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rero.Intent.inputText)
}
inline void Intent::set_inputtext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  inputtext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:rero.Intent.inputText)
}
inline void Intent::set_inputtext(const char* value,
    size_t size) {
  
  inputtext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rero.Intent.inputText)
}
inline std::string* Intent::_internal_mutable_inputtext() {
  
  return inputtext_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Intent::release_inputtext() {
  // @@protoc_insertion_point(field_release:rero.Intent.inputText)
  return inputtext_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Intent::set_allocated_inputtext(std::string* inputtext) {
  if (inputtext != nullptr) {
    
  } else {
    
  }
  inputtext_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inputtext,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rero.Intent.inputText)
}

// string intentName = 2;
inline void Intent::clear_intentname() {
  intentname_.ClearToEmpty();
}
inline const std::string& Intent::intentname() const {
  // @@protoc_insertion_point(field_get:rero.Intent.intentName)
  return _internal_intentname();
}
inline void Intent::set_intentname(const std::string& value) {
  _internal_set_intentname(value);
  // @@protoc_insertion_point(field_set:rero.Intent.intentName)
}
inline std::string* Intent::mutable_intentname() {
  // @@protoc_insertion_point(field_mutable:rero.Intent.intentName)
  return _internal_mutable_intentname();
}
inline const std::string& Intent::_internal_intentname() const {
  return intentname_.Get();
}
inline void Intent::_internal_set_intentname(const std::string& value) {
  
  intentname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Intent::set_intentname(std::string&& value) {
  
  intentname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rero.Intent.intentName)
}
inline void Intent::set_intentname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  intentname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:rero.Intent.intentName)
}
inline void Intent::set_intentname(const char* value,
    size_t size) {
  
  intentname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rero.Intent.intentName)
}
inline std::string* Intent::_internal_mutable_intentname() {
  
  return intentname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Intent::release_intentname() {
  // @@protoc_insertion_point(field_release:rero.Intent.intentName)
  return intentname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Intent::set_allocated_intentname(std::string* intentname) {
  if (intentname != nullptr) {
    
  } else {
    
  }
  intentname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), intentname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rero.Intent.intentName)
}

// float probability = 3;
inline void Intent::clear_probability() {
  probability_ = 0;
}
inline float Intent::_internal_probability() const {
  return probability_;
}
inline float Intent::probability() const {
  // @@protoc_insertion_point(field_get:rero.Intent.probability)
  return _internal_probability();
}
inline void Intent::_internal_set_probability(float value) {
  
  probability_ = value;
}
inline void Intent::set_probability(float value) {
  _internal_set_probability(value);
  // @@protoc_insertion_point(field_set:rero.Intent.probability)
}

// repeated .rero.Slot slots = 4;
inline int Intent::_internal_slots_size() const {
  return slots_.size();
}
inline int Intent::slots_size() const {
  return _internal_slots_size();
}
inline void Intent::clear_slots() {
  slots_.Clear();
}
inline ::rero::Slot* Intent::mutable_slots(int index) {
  // @@protoc_insertion_point(field_mutable:rero.Intent.slots)
  return slots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rero::Slot >*
Intent::mutable_slots() {
  // @@protoc_insertion_point(field_mutable_list:rero.Intent.slots)
  return &slots_;
}
inline const ::rero::Slot& Intent::_internal_slots(int index) const {
  return slots_.Get(index);
}
inline const ::rero::Slot& Intent::slots(int index) const {
  // @@protoc_insertion_point(field_get:rero.Intent.slots)
  return _internal_slots(index);
}
inline ::rero::Slot* Intent::_internal_add_slots() {
  return slots_.Add();
}
inline ::rero::Slot* Intent::add_slots() {
  // @@protoc_insertion_point(field_add:rero.Intent.slots)
  return _internal_add_slots();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rero::Slot >&
Intent::slots() const {
  // @@protoc_insertion_point(field_list:rero.Intent.slots)
  return slots_;
}

// -------------------------------------------------------------------

// Slot

// string rawValue = 1;
inline void Slot::clear_rawvalue() {
  rawvalue_.ClearToEmpty();
}
inline const std::string& Slot::rawvalue() const {
  // @@protoc_insertion_point(field_get:rero.Slot.rawValue)
  return _internal_rawvalue();
}
inline void Slot::set_rawvalue(const std::string& value) {
  _internal_set_rawvalue(value);
  // @@protoc_insertion_point(field_set:rero.Slot.rawValue)
}
inline std::string* Slot::mutable_rawvalue() {
  // @@protoc_insertion_point(field_mutable:rero.Slot.rawValue)
  return _internal_mutable_rawvalue();
}
inline const std::string& Slot::_internal_rawvalue() const {
  return rawvalue_.Get();
}
inline void Slot::_internal_set_rawvalue(const std::string& value) {
  
  rawvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Slot::set_rawvalue(std::string&& value) {
  
  rawvalue_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rero.Slot.rawValue)
}
inline void Slot::set_rawvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rawvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:rero.Slot.rawValue)
}
inline void Slot::set_rawvalue(const char* value,
    size_t size) {
  
  rawvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rero.Slot.rawValue)
}
inline std::string* Slot::_internal_mutable_rawvalue() {
  
  return rawvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Slot::release_rawvalue() {
  // @@protoc_insertion_point(field_release:rero.Slot.rawValue)
  return rawvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Slot::set_allocated_rawvalue(std::string* rawvalue) {
  if (rawvalue != nullptr) {
    
  } else {
    
  }
  rawvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rawvalue,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rero.Slot.rawValue)
}

// string entity = 2;
inline void Slot::clear_entity() {
  entity_.ClearToEmpty();
}
inline const std::string& Slot::entity() const {
  // @@protoc_insertion_point(field_get:rero.Slot.entity)
  return _internal_entity();
}
inline void Slot::set_entity(const std::string& value) {
  _internal_set_entity(value);
  // @@protoc_insertion_point(field_set:rero.Slot.entity)
}
inline std::string* Slot::mutable_entity() {
  // @@protoc_insertion_point(field_mutable:rero.Slot.entity)
  return _internal_mutable_entity();
}
inline const std::string& Slot::_internal_entity() const {
  return entity_.Get();
}
inline void Slot::_internal_set_entity(const std::string& value) {
  
  entity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Slot::set_entity(std::string&& value) {
  
  entity_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rero.Slot.entity)
}
inline void Slot::set_entity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:rero.Slot.entity)
}
inline void Slot::set_entity(const char* value,
    size_t size) {
  
  entity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rero.Slot.entity)
}
inline std::string* Slot::_internal_mutable_entity() {
  
  return entity_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Slot::release_entity() {
  // @@protoc_insertion_point(field_release:rero.Slot.entity)
  return entity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Slot::set_allocated_entity(std::string* entity) {
  if (entity != nullptr) {
    
  } else {
    
  }
  entity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entity,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rero.Slot.entity)
}

// string slotName = 3;
inline void Slot::clear_slotname() {
  slotname_.ClearToEmpty();
}
inline const std::string& Slot::slotname() const {
  // @@protoc_insertion_point(field_get:rero.Slot.slotName)
  return _internal_slotname();
}
inline void Slot::set_slotname(const std::string& value) {
  _internal_set_slotname(value);
  // @@protoc_insertion_point(field_set:rero.Slot.slotName)
}
inline std::string* Slot::mutable_slotname() {
  // @@protoc_insertion_point(field_mutable:rero.Slot.slotName)
  return _internal_mutable_slotname();
}
inline const std::string& Slot::_internal_slotname() const {
  return slotname_.Get();
}
inline void Slot::_internal_set_slotname(const std::string& value) {
  
  slotname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Slot::set_slotname(std::string&& value) {
  
  slotname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rero.Slot.slotName)
}
inline void Slot::set_slotname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  slotname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:rero.Slot.slotName)
}
inline void Slot::set_slotname(const char* value,
    size_t size) {
  
  slotname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rero.Slot.slotName)
}
inline std::string* Slot::_internal_mutable_slotname() {
  
  return slotname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Slot::release_slotname() {
  // @@protoc_insertion_point(field_release:rero.Slot.slotName)
  return slotname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Slot::set_allocated_slotname(std::string* slotname) {
  if (slotname != nullptr) {
    
  } else {
    
  }
  slotname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), slotname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rero.Slot.slotName)
}

// uint32 rangeStart = 4;
inline void Slot::clear_rangestart() {
  rangestart_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Slot::_internal_rangestart() const {
  return rangestart_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Slot::rangestart() const {
  // @@protoc_insertion_point(field_get:rero.Slot.rangeStart)
  return _internal_rangestart();
}
inline void Slot::_internal_set_rangestart(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rangestart_ = value;
}
inline void Slot::set_rangestart(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rangestart(value);
  // @@protoc_insertion_point(field_set:rero.Slot.rangeStart)
}

// uint32 rangeEnd = 5;
inline void Slot::clear_rangeend() {
  rangeend_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Slot::_internal_rangeend() const {
  return rangeend_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Slot::rangeend() const {
  // @@protoc_insertion_point(field_get:rero.Slot.rangeEnd)
  return _internal_rangeend();
}
inline void Slot::_internal_set_rangeend(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rangeend_ = value;
}
inline void Slot::set_rangeend(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rangeend(value);
  // @@protoc_insertion_point(field_set:rero.Slot.rangeEnd)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rero

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_nlu_2eproto
