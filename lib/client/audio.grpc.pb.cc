// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: audio.proto

#include "audio.pb.h"
#include "audio.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace rero {

static const char* AudioStreamer_method_names[] = {
  "/rero.AudioStreamer/GetStream",
};

std::unique_ptr< AudioStreamer::Stub> AudioStreamer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AudioStreamer::Stub> stub(new AudioStreamer::Stub(channel));
  return stub;
}

AudioStreamer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetStream_(AudioStreamer_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::rero::Audio>* AudioStreamer::Stub::GetStreamRaw(::grpc::ClientContext* context, const ::rero::StreamRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::rero::Audio>::Create(channel_.get(), rpcmethod_GetStream_, context, request);
}

void AudioStreamer::Stub::experimental_async::GetStream(::grpc::ClientContext* context, ::rero::StreamRequest* request, ::grpc::experimental::ClientReadReactor< ::rero::Audio>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::rero::Audio>::Create(stub_->channel_.get(), stub_->rpcmethod_GetStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::rero::Audio>* AudioStreamer::Stub::AsyncGetStreamRaw(::grpc::ClientContext* context, const ::rero::StreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::rero::Audio>::Create(channel_.get(), cq, rpcmethod_GetStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::rero::Audio>* AudioStreamer::Stub::PrepareAsyncGetStreamRaw(::grpc::ClientContext* context, const ::rero::StreamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::rero::Audio>::Create(channel_.get(), cq, rpcmethod_GetStream_, context, request, false, nullptr);
}

AudioStreamer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioStreamer_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< AudioStreamer::Service, ::rero::StreamRequest, ::rero::Audio>(
          [](AudioStreamer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rero::StreamRequest* req,
             ::grpc::ServerWriter<::rero::Audio>* writer) {
               return service->GetStream(ctx, req, writer);
             }, this)));
}

AudioStreamer::Service::~Service() {
}

::grpc::Status AudioStreamer::Service::GetStream(::grpc::ServerContext* context, const ::rero::StreamRequest* request, ::grpc::ServerWriter< ::rero::Audio>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace rero

