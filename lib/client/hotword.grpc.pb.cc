// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: hotword.proto

#include "hotword.pb.h"
#include "hotword.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace rero {

static const char* HotwordDetection_method_names[] = {
  "/rero.HotwordDetection/StartHotwordStream",
  "/rero.HotwordDetection/RecognizeHotword",
  "/rero.HotwordDetection/GetEmbedding",
  "/rero.HotwordDetection/AddEmbeddingToHotword",
  "/rero.HotwordDetection/PersistHotword",
};

std::unique_ptr< HotwordDetection::Stub> HotwordDetection::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< HotwordDetection::Stub> stub(new HotwordDetection::Stub(channel, options));
  return stub;
}

HotwordDetection::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_StartHotwordStream_(HotwordDetection_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_RecognizeHotword_(HotwordDetection_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_GetEmbedding_(HotwordDetection_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_AddEmbeddingToHotword_(HotwordDetection_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PersistHotword_(HotwordDetection_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReaderWriter< ::rero::Audio, ::rero::HotwordResult>* HotwordDetection::Stub::StartHotwordStreamRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::rero::Audio, ::rero::HotwordResult>::Create(channel_.get(), rpcmethod_StartHotwordStream_, context);
}

void HotwordDetection::Stub::async::StartHotwordStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::rero::Audio,::rero::HotwordResult>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::rero::Audio,::rero::HotwordResult>::Create(stub_->channel_.get(), stub_->rpcmethod_StartHotwordStream_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::rero::Audio, ::rero::HotwordResult>* HotwordDetection::Stub::AsyncStartHotwordStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::rero::Audio, ::rero::HotwordResult>::Create(channel_.get(), cq, rpcmethod_StartHotwordStream_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::rero::Audio, ::rero::HotwordResult>* HotwordDetection::Stub::PrepareAsyncStartHotwordStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::rero::Audio, ::rero::HotwordResult>::Create(channel_.get(), cq, rpcmethod_StartHotwordStream_, context, false, nullptr);
}

::grpc::ClientWriter< ::rero::Audio>* HotwordDetection::Stub::RecognizeHotwordRaw(::grpc::ClientContext* context, ::rero::HotwordResult* response) {
  return ::grpc::internal::ClientWriterFactory< ::rero::Audio>::Create(channel_.get(), rpcmethod_RecognizeHotword_, context, response);
}

void HotwordDetection::Stub::async::RecognizeHotword(::grpc::ClientContext* context, ::rero::HotwordResult* response, ::grpc::ClientWriteReactor< ::rero::Audio>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::rero::Audio>::Create(stub_->channel_.get(), stub_->rpcmethod_RecognizeHotword_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::rero::Audio>* HotwordDetection::Stub::AsyncRecognizeHotwordRaw(::grpc::ClientContext* context, ::rero::HotwordResult* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::rero::Audio>::Create(channel_.get(), cq, rpcmethod_RecognizeHotword_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::rero::Audio>* HotwordDetection::Stub::PrepareAsyncRecognizeHotwordRaw(::grpc::ClientContext* context, ::rero::HotwordResult* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::rero::Audio>::Create(channel_.get(), cq, rpcmethod_RecognizeHotword_, context, response, false, nullptr);
}

::grpc::ClientWriter< ::rero::Audio>* HotwordDetection::Stub::GetEmbeddingRaw(::grpc::ClientContext* context, ::rero::RawEmbedding* response) {
  return ::grpc::internal::ClientWriterFactory< ::rero::Audio>::Create(channel_.get(), rpcmethod_GetEmbedding_, context, response);
}

void HotwordDetection::Stub::async::GetEmbedding(::grpc::ClientContext* context, ::rero::RawEmbedding* response, ::grpc::ClientWriteReactor< ::rero::Audio>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::rero::Audio>::Create(stub_->channel_.get(), stub_->rpcmethod_GetEmbedding_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::rero::Audio>* HotwordDetection::Stub::AsyncGetEmbeddingRaw(::grpc::ClientContext* context, ::rero::RawEmbedding* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::rero::Audio>::Create(channel_.get(), cq, rpcmethod_GetEmbedding_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::rero::Audio>* HotwordDetection::Stub::PrepareAsyncGetEmbeddingRaw(::grpc::ClientContext* context, ::rero::RawEmbedding* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::rero::Audio>::Create(channel_.get(), cq, rpcmethod_GetEmbedding_, context, response, false, nullptr);
}

::grpc::Status HotwordDetection::Stub::AddEmbeddingToHotword(::grpc::ClientContext* context, const ::rero::HotwordEmbedding& request, ::rero::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rero::HotwordEmbedding, ::rero::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddEmbeddingToHotword_, context, request, response);
}

void HotwordDetection::Stub::async::AddEmbeddingToHotword(::grpc::ClientContext* context, const ::rero::HotwordEmbedding* request, ::rero::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rero::HotwordEmbedding, ::rero::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddEmbeddingToHotword_, context, request, response, std::move(f));
}

void HotwordDetection::Stub::async::AddEmbeddingToHotword(::grpc::ClientContext* context, const ::rero::HotwordEmbedding* request, ::rero::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddEmbeddingToHotword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rero::Result>* HotwordDetection::Stub::PrepareAsyncAddEmbeddingToHotwordRaw(::grpc::ClientContext* context, const ::rero::HotwordEmbedding& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rero::Result, ::rero::HotwordEmbedding, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddEmbeddingToHotword_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rero::Result>* HotwordDetection::Stub::AsyncAddEmbeddingToHotwordRaw(::grpc::ClientContext* context, const ::rero::HotwordEmbedding& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddEmbeddingToHotwordRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HotwordDetection::Stub::PersistHotword(::grpc::ClientContext* context, const ::rero::HotwordFileName& request, ::rero::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rero::HotwordFileName, ::rero::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PersistHotword_, context, request, response);
}

void HotwordDetection::Stub::async::PersistHotword(::grpc::ClientContext* context, const ::rero::HotwordFileName* request, ::rero::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rero::HotwordFileName, ::rero::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PersistHotword_, context, request, response, std::move(f));
}

void HotwordDetection::Stub::async::PersistHotword(::grpc::ClientContext* context, const ::rero::HotwordFileName* request, ::rero::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PersistHotword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rero::Result>* HotwordDetection::Stub::PrepareAsyncPersistHotwordRaw(::grpc::ClientContext* context, const ::rero::HotwordFileName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rero::Result, ::rero::HotwordFileName, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PersistHotword_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rero::Result>* HotwordDetection::Stub::AsyncPersistHotwordRaw(::grpc::ClientContext* context, const ::rero::HotwordFileName& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPersistHotwordRaw(context, request, cq);
  result->StartCall();
  return result;
}

HotwordDetection::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HotwordDetection_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< HotwordDetection::Service, ::rero::Audio, ::rero::HotwordResult>(
          [](HotwordDetection::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::rero::HotwordResult,
             ::rero::Audio>* stream) {
               return service->StartHotwordStream(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HotwordDetection_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< HotwordDetection::Service, ::rero::Audio, ::rero::HotwordResult>(
          [](HotwordDetection::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::rero::Audio>* reader,
             ::rero::HotwordResult* resp) {
               return service->RecognizeHotword(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HotwordDetection_method_names[2],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< HotwordDetection::Service, ::rero::Audio, ::rero::RawEmbedding>(
          [](HotwordDetection::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::rero::Audio>* reader,
             ::rero::RawEmbedding* resp) {
               return service->GetEmbedding(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HotwordDetection_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HotwordDetection::Service, ::rero::HotwordEmbedding, ::rero::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HotwordDetection::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rero::HotwordEmbedding* req,
             ::rero::Result* resp) {
               return service->AddEmbeddingToHotword(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HotwordDetection_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HotwordDetection::Service, ::rero::HotwordFileName, ::rero::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HotwordDetection::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rero::HotwordFileName* req,
             ::rero::Result* resp) {
               return service->PersistHotword(ctx, req, resp);
             }, this)));
}

HotwordDetection::Service::~Service() {
}

::grpc::Status HotwordDetection::Service::StartHotwordStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::rero::HotwordResult, ::rero::Audio>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HotwordDetection::Service::RecognizeHotword(::grpc::ServerContext* context, ::grpc::ServerReader< ::rero::Audio>* reader, ::rero::HotwordResult* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HotwordDetection::Service::GetEmbedding(::grpc::ServerContext* context, ::grpc::ServerReader< ::rero::Audio>* reader, ::rero::RawEmbedding* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HotwordDetection::Service::AddEmbeddingToHotword(::grpc::ServerContext* context, const ::rero::HotwordEmbedding* request, ::rero::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HotwordDetection::Service::PersistHotword(::grpc::ServerContext* context, const ::rero::HotwordFileName* request, ::rero::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace rero

