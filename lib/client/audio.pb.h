// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: audio.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_audio_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_audio_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_audio_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_audio_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_audio_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_audio_2eproto_metadata_getter(int index);
namespace rero {
class Audio;
struct AudioDefaultTypeInternal;
extern AudioDefaultTypeInternal _Audio_default_instance_;
class StreamRequest;
struct StreamRequestDefaultTypeInternal;
extern StreamRequestDefaultTypeInternal _StreamRequest_default_instance_;
}  // namespace rero
PROTOBUF_NAMESPACE_OPEN
template<> ::rero::Audio* Arena::CreateMaybeMessage<::rero::Audio>(Arena*);
template<> ::rero::StreamRequest* Arena::CreateMaybeMessage<::rero::StreamRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rero {

// ===================================================================

class StreamRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rero.StreamRequest) */ {
 public:
  inline StreamRequest() : StreamRequest(nullptr) {}
  virtual ~StreamRequest();
  explicit constexpr StreamRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamRequest(const StreamRequest& from);
  StreamRequest(StreamRequest&& from) noexcept
    : StreamRequest() {
    *this = ::std::move(from);
  }

  inline StreamRequest& operator=(const StreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamRequest& operator=(StreamRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamRequest* internal_default_instance() {
    return reinterpret_cast<const StreamRequest*>(
               &_StreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StreamRequest& a, StreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamRequest* New() const final {
    return CreateMaybeMessage<StreamRequest>(nullptr);
  }

  StreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamRequest& from);
  void MergeFrom(const StreamRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rero.StreamRequest";
  }
  protected:
  explicit StreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_audio_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormatFieldNumber = 3,
    kSampleRateFieldNumber = 1,
    kNumChannelsFieldNumber = 2,
    kFramesPerBufferFieldNumber = 4,
    kBytesPerSampleFieldNumber = 5,
  };
  // string format = 3;
  void clear_format();
  const std::string& format() const;
  void set_format(const std::string& value);
  void set_format(std::string&& value);
  void set_format(const char* value);
  void set_format(const char* value, size_t size);
  std::string* mutable_format();
  std::string* release_format();
  void set_allocated_format(std::string* format);
  private:
  const std::string& _internal_format() const;
  void _internal_set_format(const std::string& value);
  std::string* _internal_mutable_format();
  public:

  // uint32 sample_rate = 1;
  void clear_sample_rate();
  ::PROTOBUF_NAMESPACE_ID::uint32 sample_rate() const;
  void set_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sample_rate() const;
  void _internal_set_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 num_channels = 2;
  void clear_num_channels();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_channels() const;
  void set_num_channels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_channels() const;
  void _internal_set_num_channels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 frames_per_buffer = 4;
  void clear_frames_per_buffer();
  ::PROTOBUF_NAMESPACE_ID::uint32 frames_per_buffer() const;
  void set_frames_per_buffer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frames_per_buffer() const;
  void _internal_set_frames_per_buffer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 bytes_per_sample = 5;
  void clear_bytes_per_sample();
  ::PROTOBUF_NAMESPACE_ID::uint32 bytes_per_sample() const;
  void set_bytes_per_sample(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bytes_per_sample() const;
  void _internal_set_bytes_per_sample(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:rero.StreamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sample_rate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_channels_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frames_per_buffer_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bytes_per_sample_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_audio_2eproto;
};
// -------------------------------------------------------------------

class Audio PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rero.Audio) */ {
 public:
  inline Audio() : Audio(nullptr) {}
  virtual ~Audio();
  explicit constexpr Audio(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Audio(const Audio& from);
  Audio(Audio&& from) noexcept
    : Audio() {
    *this = ::std::move(from);
  }

  inline Audio& operator=(const Audio& from) {
    CopyFrom(from);
    return *this;
  }
  inline Audio& operator=(Audio&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Audio& default_instance() {
    return *internal_default_instance();
  }
  static inline const Audio* internal_default_instance() {
    return reinterpret_cast<const Audio*>(
               &_Audio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Audio& a, Audio& b) {
    a.Swap(&b);
  }
  inline void Swap(Audio* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Audio* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Audio* New() const final {
    return CreateMaybeMessage<Audio>(nullptr);
  }

  Audio* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Audio>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Audio& from);
  void MergeFrom(const Audio& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Audio* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rero.Audio";
  }
  protected:
  explicit Audio(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_audio_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawDataFieldNumber = 6,
    kNumSamplesFieldNumber = 1,
    kNumChannelsFieldNumber = 2,
    kBytesPerSampleFieldNumber = 3,
    kFramesPerBufferFieldNumber = 4,
    kSampleRateFieldNumber = 5,
  };
  // bytes raw_data = 6;
  void clear_raw_data();
  const std::string& raw_data() const;
  void set_raw_data(const std::string& value);
  void set_raw_data(std::string&& value);
  void set_raw_data(const char* value);
  void set_raw_data(const void* value, size_t size);
  std::string* mutable_raw_data();
  std::string* release_raw_data();
  void set_allocated_raw_data(std::string* raw_data);
  private:
  const std::string& _internal_raw_data() const;
  void _internal_set_raw_data(const std::string& value);
  std::string* _internal_mutable_raw_data();
  public:

  // uint32 num_samples = 1;
  void clear_num_samples();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_samples() const;
  void set_num_samples(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_samples() const;
  void _internal_set_num_samples(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 num_channels = 2;
  void clear_num_channels();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_channels() const;
  void set_num_channels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_channels() const;
  void _internal_set_num_channels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 bytes_per_sample = 3;
  void clear_bytes_per_sample();
  ::PROTOBUF_NAMESPACE_ID::uint32 bytes_per_sample() const;
  void set_bytes_per_sample(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bytes_per_sample() const;
  void _internal_set_bytes_per_sample(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 frames_per_buffer = 4;
  void clear_frames_per_buffer();
  ::PROTOBUF_NAMESPACE_ID::uint32 frames_per_buffer() const;
  void set_frames_per_buffer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frames_per_buffer() const;
  void _internal_set_frames_per_buffer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sample_rate = 5;
  void clear_sample_rate();
  ::PROTOBUF_NAMESPACE_ID::uint32 sample_rate() const;
  void set_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sample_rate() const;
  void _internal_set_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:rero.Audio)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_samples_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_channels_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bytes_per_sample_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frames_per_buffer_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sample_rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_audio_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StreamRequest

// uint32 sample_rate = 1;
inline void StreamRequest::clear_sample_rate() {
  sample_rate_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamRequest::_internal_sample_rate() const {
  return sample_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamRequest::sample_rate() const {
  // @@protoc_insertion_point(field_get:rero.StreamRequest.sample_rate)
  return _internal_sample_rate();
}
inline void StreamRequest::_internal_set_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sample_rate_ = value;
}
inline void StreamRequest::set_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sample_rate(value);
  // @@protoc_insertion_point(field_set:rero.StreamRequest.sample_rate)
}

// uint32 num_channels = 2;
inline void StreamRequest::clear_num_channels() {
  num_channels_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamRequest::_internal_num_channels() const {
  return num_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamRequest::num_channels() const {
  // @@protoc_insertion_point(field_get:rero.StreamRequest.num_channels)
  return _internal_num_channels();
}
inline void StreamRequest::_internal_set_num_channels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_channels_ = value;
}
inline void StreamRequest::set_num_channels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_channels(value);
  // @@protoc_insertion_point(field_set:rero.StreamRequest.num_channels)
}

// string format = 3;
inline void StreamRequest::clear_format() {
  format_.ClearToEmpty();
}
inline const std::string& StreamRequest::format() const {
  // @@protoc_insertion_point(field_get:rero.StreamRequest.format)
  return _internal_format();
}
inline void StreamRequest::set_format(const std::string& value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:rero.StreamRequest.format)
}
inline std::string* StreamRequest::mutable_format() {
  // @@protoc_insertion_point(field_mutable:rero.StreamRequest.format)
  return _internal_mutable_format();
}
inline const std::string& StreamRequest::_internal_format() const {
  return format_.Get();
}
inline void StreamRequest::_internal_set_format(const std::string& value) {
  
  format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StreamRequest::set_format(std::string&& value) {
  
  format_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rero.StreamRequest.format)
}
inline void StreamRequest::set_format(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:rero.StreamRequest.format)
}
inline void StreamRequest::set_format(const char* value,
    size_t size) {
  
  format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rero.StreamRequest.format)
}
inline std::string* StreamRequest::_internal_mutable_format() {
  
  return format_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StreamRequest::release_format() {
  // @@protoc_insertion_point(field_release:rero.StreamRequest.format)
  return format_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamRequest::set_allocated_format(std::string* format) {
  if (format != nullptr) {
    
  } else {
    
  }
  format_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), format,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rero.StreamRequest.format)
}

// uint32 frames_per_buffer = 4;
inline void StreamRequest::clear_frames_per_buffer() {
  frames_per_buffer_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamRequest::_internal_frames_per_buffer() const {
  return frames_per_buffer_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamRequest::frames_per_buffer() const {
  // @@protoc_insertion_point(field_get:rero.StreamRequest.frames_per_buffer)
  return _internal_frames_per_buffer();
}
inline void StreamRequest::_internal_set_frames_per_buffer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  frames_per_buffer_ = value;
}
inline void StreamRequest::set_frames_per_buffer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frames_per_buffer(value);
  // @@protoc_insertion_point(field_set:rero.StreamRequest.frames_per_buffer)
}

// uint32 bytes_per_sample = 5;
inline void StreamRequest::clear_bytes_per_sample() {
  bytes_per_sample_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamRequest::_internal_bytes_per_sample() const {
  return bytes_per_sample_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamRequest::bytes_per_sample() const {
  // @@protoc_insertion_point(field_get:rero.StreamRequest.bytes_per_sample)
  return _internal_bytes_per_sample();
}
inline void StreamRequest::_internal_set_bytes_per_sample(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bytes_per_sample_ = value;
}
inline void StreamRequest::set_bytes_per_sample(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bytes_per_sample(value);
  // @@protoc_insertion_point(field_set:rero.StreamRequest.bytes_per_sample)
}

// -------------------------------------------------------------------

// Audio

// uint32 num_samples = 1;
inline void Audio::clear_num_samples() {
  num_samples_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Audio::_internal_num_samples() const {
  return num_samples_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Audio::num_samples() const {
  // @@protoc_insertion_point(field_get:rero.Audio.num_samples)
  return _internal_num_samples();
}
inline void Audio::_internal_set_num_samples(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_samples_ = value;
}
inline void Audio::set_num_samples(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_samples(value);
  // @@protoc_insertion_point(field_set:rero.Audio.num_samples)
}

// uint32 num_channels = 2;
inline void Audio::clear_num_channels() {
  num_channels_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Audio::_internal_num_channels() const {
  return num_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Audio::num_channels() const {
  // @@protoc_insertion_point(field_get:rero.Audio.num_channels)
  return _internal_num_channels();
}
inline void Audio::_internal_set_num_channels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_channels_ = value;
}
inline void Audio::set_num_channels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_channels(value);
  // @@protoc_insertion_point(field_set:rero.Audio.num_channels)
}

// uint32 bytes_per_sample = 3;
inline void Audio::clear_bytes_per_sample() {
  bytes_per_sample_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Audio::_internal_bytes_per_sample() const {
  return bytes_per_sample_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Audio::bytes_per_sample() const {
  // @@protoc_insertion_point(field_get:rero.Audio.bytes_per_sample)
  return _internal_bytes_per_sample();
}
inline void Audio::_internal_set_bytes_per_sample(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bytes_per_sample_ = value;
}
inline void Audio::set_bytes_per_sample(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bytes_per_sample(value);
  // @@protoc_insertion_point(field_set:rero.Audio.bytes_per_sample)
}

// uint32 frames_per_buffer = 4;
inline void Audio::clear_frames_per_buffer() {
  frames_per_buffer_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Audio::_internal_frames_per_buffer() const {
  return frames_per_buffer_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Audio::frames_per_buffer() const {
  // @@protoc_insertion_point(field_get:rero.Audio.frames_per_buffer)
  return _internal_frames_per_buffer();
}
inline void Audio::_internal_set_frames_per_buffer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  frames_per_buffer_ = value;
}
inline void Audio::set_frames_per_buffer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frames_per_buffer(value);
  // @@protoc_insertion_point(field_set:rero.Audio.frames_per_buffer)
}

// uint32 sample_rate = 5;
inline void Audio::clear_sample_rate() {
  sample_rate_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Audio::_internal_sample_rate() const {
  return sample_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Audio::sample_rate() const {
  // @@protoc_insertion_point(field_get:rero.Audio.sample_rate)
  return _internal_sample_rate();
}
inline void Audio::_internal_set_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sample_rate_ = value;
}
inline void Audio::set_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sample_rate(value);
  // @@protoc_insertion_point(field_set:rero.Audio.sample_rate)
}

// bytes raw_data = 6;
inline void Audio::clear_raw_data() {
  raw_data_.ClearToEmpty();
}
inline const std::string& Audio::raw_data() const {
  // @@protoc_insertion_point(field_get:rero.Audio.raw_data)
  return _internal_raw_data();
}
inline void Audio::set_raw_data(const std::string& value) {
  _internal_set_raw_data(value);
  // @@protoc_insertion_point(field_set:rero.Audio.raw_data)
}
inline std::string* Audio::mutable_raw_data() {
  // @@protoc_insertion_point(field_mutable:rero.Audio.raw_data)
  return _internal_mutable_raw_data();
}
inline const std::string& Audio::_internal_raw_data() const {
  return raw_data_.Get();
}
inline void Audio::_internal_set_raw_data(const std::string& value) {
  
  raw_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Audio::set_raw_data(std::string&& value) {
  
  raw_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rero.Audio.raw_data)
}
inline void Audio::set_raw_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  raw_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:rero.Audio.raw_data)
}
inline void Audio::set_raw_data(const void* value,
    size_t size) {
  
  raw_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rero.Audio.raw_data)
}
inline std::string* Audio::_internal_mutable_raw_data() {
  
  return raw_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Audio::release_raw_data() {
  // @@protoc_insertion_point(field_release:rero.Audio.raw_data)
  return raw_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Audio::set_allocated_raw_data(std::string* raw_data) {
  if (raw_data != nullptr) {
    
  } else {
    
  }
  raw_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raw_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rero.Audio.raw_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rero

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_audio_2eproto
