// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: audio.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_audio_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_audio_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_audio_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_audio_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_audio_2eproto;
namespace rero {
class Audio;
struct AudioDefaultTypeInternal;
extern AudioDefaultTypeInternal _Audio_default_instance_;
class PlayResult;
struct PlayResultDefaultTypeInternal;
extern PlayResultDefaultTypeInternal _PlayResult_default_instance_;
class StreamRequest;
struct StreamRequestDefaultTypeInternal;
extern StreamRequestDefaultTypeInternal _StreamRequest_default_instance_;
}  // namespace rero
PROTOBUF_NAMESPACE_OPEN
template <>
::rero::Audio* Arena::CreateMaybeMessage<::rero::Audio>(Arena*);
template <>
::rero::PlayResult* Arena::CreateMaybeMessage<::rero::PlayResult>(Arena*);
template <>
::rero::StreamRequest* Arena::CreateMaybeMessage<::rero::StreamRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace rero {

// ===================================================================


// -------------------------------------------------------------------

class StreamRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rero.StreamRequest) */ {
 public:
  inline StreamRequest() : StreamRequest(nullptr) {}
  ~StreamRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StreamRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamRequest(const StreamRequest& from);
  StreamRequest(StreamRequest&& from) noexcept
    : StreamRequest() {
    *this = ::std::move(from);
  }

  inline StreamRequest& operator=(const StreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamRequest& operator=(StreamRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamRequest* internal_default_instance() {
    return reinterpret_cast<const StreamRequest*>(
               &_StreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StreamRequest& a, StreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamRequest& from) {
    StreamRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rero.StreamRequest";
  }
  protected:
  explicit StreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormatFieldNumber = 3,
    kSampleRateFieldNumber = 1,
    kNumChannelsFieldNumber = 2,
    kFramesPerBufferFieldNumber = 4,
    kBytesPerSampleFieldNumber = 5,
  };
  // string format = 3;
  void clear_format() ;
  const std::string& format() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_format(Arg_&& arg, Args_... args);
  std::string* mutable_format();
  PROTOBUF_NODISCARD std::string* release_format();
  void set_allocated_format(std::string* ptr);

  private:
  const std::string& _internal_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_format(
      const std::string& value);
  std::string* _internal_mutable_format();

  public:
  // uint32 sample_rate = 1;
  void clear_sample_rate() ;
  ::uint32_t sample_rate() const;
  void set_sample_rate(::uint32_t value);

  private:
  ::uint32_t _internal_sample_rate() const;
  void _internal_set_sample_rate(::uint32_t value);

  public:
  // uint32 num_channels = 2;
  void clear_num_channels() ;
  ::uint32_t num_channels() const;
  void set_num_channels(::uint32_t value);

  private:
  ::uint32_t _internal_num_channels() const;
  void _internal_set_num_channels(::uint32_t value);

  public:
  // uint32 frames_per_buffer = 4;
  void clear_frames_per_buffer() ;
  ::uint32_t frames_per_buffer() const;
  void set_frames_per_buffer(::uint32_t value);

  private:
  ::uint32_t _internal_frames_per_buffer() const;
  void _internal_set_frames_per_buffer(::uint32_t value);

  public:
  // uint32 bytes_per_sample = 5;
  void clear_bytes_per_sample() ;
  ::uint32_t bytes_per_sample() const;
  void set_bytes_per_sample(::uint32_t value);

  private:
  ::uint32_t _internal_bytes_per_sample() const;
  void _internal_set_bytes_per_sample(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:rero.StreamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_;
    ::uint32_t sample_rate_;
    ::uint32_t num_channels_;
    ::uint32_t frames_per_buffer_;
    ::uint32_t bytes_per_sample_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_audio_2eproto;
};// -------------------------------------------------------------------

class PlayResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rero.PlayResult) */ {
 public:
  inline PlayResult() : PlayResult(nullptr) {}
  ~PlayResult() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PlayResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayResult(const PlayResult& from);
  PlayResult(PlayResult&& from) noexcept
    : PlayResult() {
    *this = ::std::move(from);
  }

  inline PlayResult& operator=(const PlayResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayResult& operator=(PlayResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayResult* internal_default_instance() {
    return reinterpret_cast<const PlayResult*>(
               &_PlayResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlayResult& a, PlayResult& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayResult& from) {
    PlayResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rero.PlayResult";
  }
  protected:
  explicit PlayResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaErrorMsgFieldNumber = 2,
    kPaErrorCodeFieldNumber = 1,
  };
  // string pa_error_msg = 2;
  void clear_pa_error_msg() ;
  const std::string& pa_error_msg() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pa_error_msg(Arg_&& arg, Args_... args);
  std::string* mutable_pa_error_msg();
  PROTOBUF_NODISCARD std::string* release_pa_error_msg();
  void set_allocated_pa_error_msg(std::string* ptr);

  private:
  const std::string& _internal_pa_error_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pa_error_msg(
      const std::string& value);
  std::string* _internal_mutable_pa_error_msg();

  public:
  // uint32 pa_error_code = 1;
  void clear_pa_error_code() ;
  ::uint32_t pa_error_code() const;
  void set_pa_error_code(::uint32_t value);

  private:
  ::uint32_t _internal_pa_error_code() const;
  void _internal_set_pa_error_code(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:rero.PlayResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pa_error_msg_;
    ::uint32_t pa_error_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_audio_2eproto;
};// -------------------------------------------------------------------

class Audio final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rero.Audio) */ {
 public:
  inline Audio() : Audio(nullptr) {}
  ~Audio() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Audio(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Audio(const Audio& from);
  Audio(Audio&& from) noexcept
    : Audio() {
    *this = ::std::move(from);
  }

  inline Audio& operator=(const Audio& from) {
    CopyFrom(from);
    return *this;
  }
  inline Audio& operator=(Audio&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Audio& default_instance() {
    return *internal_default_instance();
  }
  static inline const Audio* internal_default_instance() {
    return reinterpret_cast<const Audio*>(
               &_Audio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Audio& a, Audio& b) {
    a.Swap(&b);
  }
  inline void Swap(Audio* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Audio* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Audio* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Audio>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Audio& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Audio& from) {
    Audio::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Audio* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rero.Audio";
  }
  protected:
  explicit Audio(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawDataFieldNumber = 6,
    kNumSamplesFieldNumber = 1,
    kNumChannelsFieldNumber = 2,
    kBytesPerSampleFieldNumber = 3,
    kFramesPerBufferFieldNumber = 4,
    kSampleRateFieldNumber = 5,
  };
  // bytes raw_data = 6;
  void clear_raw_data() ;
  const std::string& raw_data() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_raw_data(Arg_&& arg, Args_... args);
  std::string* mutable_raw_data();
  PROTOBUF_NODISCARD std::string* release_raw_data();
  void set_allocated_raw_data(std::string* ptr);

  private:
  const std::string& _internal_raw_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_raw_data(
      const std::string& value);
  std::string* _internal_mutable_raw_data();

  public:
  // uint32 num_samples = 1;
  void clear_num_samples() ;
  ::uint32_t num_samples() const;
  void set_num_samples(::uint32_t value);

  private:
  ::uint32_t _internal_num_samples() const;
  void _internal_set_num_samples(::uint32_t value);

  public:
  // uint32 num_channels = 2;
  void clear_num_channels() ;
  ::uint32_t num_channels() const;
  void set_num_channels(::uint32_t value);

  private:
  ::uint32_t _internal_num_channels() const;
  void _internal_set_num_channels(::uint32_t value);

  public:
  // uint32 bytes_per_sample = 3;
  void clear_bytes_per_sample() ;
  ::uint32_t bytes_per_sample() const;
  void set_bytes_per_sample(::uint32_t value);

  private:
  ::uint32_t _internal_bytes_per_sample() const;
  void _internal_set_bytes_per_sample(::uint32_t value);

  public:
  // uint32 frames_per_buffer = 4;
  void clear_frames_per_buffer() ;
  ::uint32_t frames_per_buffer() const;
  void set_frames_per_buffer(::uint32_t value);

  private:
  ::uint32_t _internal_frames_per_buffer() const;
  void _internal_set_frames_per_buffer(::uint32_t value);

  public:
  // uint32 sample_rate = 5;
  void clear_sample_rate() ;
  ::uint32_t sample_rate() const;
  void set_sample_rate(::uint32_t value);

  private:
  ::uint32_t _internal_sample_rate() const;
  void _internal_set_sample_rate(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:rero.Audio)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_data_;
    ::uint32_t num_samples_;
    ::uint32_t num_channels_;
    ::uint32_t bytes_per_sample_;
    ::uint32_t frames_per_buffer_;
    ::uint32_t sample_rate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_audio_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// StreamRequest

// uint32 sample_rate = 1;
inline void StreamRequest::clear_sample_rate() {
  _impl_.sample_rate_ = 0u;
}
inline ::uint32_t StreamRequest::sample_rate() const {
  // @@protoc_insertion_point(field_get:rero.StreamRequest.sample_rate)
  return _internal_sample_rate();
}
inline void StreamRequest::set_sample_rate(::uint32_t value) {
  _internal_set_sample_rate(value);
  // @@protoc_insertion_point(field_set:rero.StreamRequest.sample_rate)
}
inline ::uint32_t StreamRequest::_internal_sample_rate() const {
  return _impl_.sample_rate_;
}
inline void StreamRequest::_internal_set_sample_rate(::uint32_t value) {
  ;
  _impl_.sample_rate_ = value;
}

// uint32 num_channels = 2;
inline void StreamRequest::clear_num_channels() {
  _impl_.num_channels_ = 0u;
}
inline ::uint32_t StreamRequest::num_channels() const {
  // @@protoc_insertion_point(field_get:rero.StreamRequest.num_channels)
  return _internal_num_channels();
}
inline void StreamRequest::set_num_channels(::uint32_t value) {
  _internal_set_num_channels(value);
  // @@protoc_insertion_point(field_set:rero.StreamRequest.num_channels)
}
inline ::uint32_t StreamRequest::_internal_num_channels() const {
  return _impl_.num_channels_;
}
inline void StreamRequest::_internal_set_num_channels(::uint32_t value) {
  ;
  _impl_.num_channels_ = value;
}

// string format = 3;
inline void StreamRequest::clear_format() {
  _impl_.format_.ClearToEmpty();
}
inline const std::string& StreamRequest::format() const {
  // @@protoc_insertion_point(field_get:rero.StreamRequest.format)
  return _internal_format();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamRequest::set_format(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.format_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rero.StreamRequest.format)
}
inline std::string* StreamRequest::mutable_format() {
  std::string* _s = _internal_mutable_format();
  // @@protoc_insertion_point(field_mutable:rero.StreamRequest.format)
  return _s;
}
inline const std::string& StreamRequest::_internal_format() const {
  return _impl_.format_.Get();
}
inline void StreamRequest::_internal_set_format(const std::string& value) {
  ;


  _impl_.format_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamRequest::_internal_mutable_format() {
  ;
  return _impl_.format_.Mutable( GetArenaForAllocation());
}
inline std::string* StreamRequest::release_format() {
  // @@protoc_insertion_point(field_release:rero.StreamRequest.format)
  return _impl_.format_.Release();
}
inline void StreamRequest::set_allocated_format(std::string* value) {
  _impl_.format_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.format_.IsDefault()) {
          _impl_.format_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rero.StreamRequest.format)
}

// uint32 frames_per_buffer = 4;
inline void StreamRequest::clear_frames_per_buffer() {
  _impl_.frames_per_buffer_ = 0u;
}
inline ::uint32_t StreamRequest::frames_per_buffer() const {
  // @@protoc_insertion_point(field_get:rero.StreamRequest.frames_per_buffer)
  return _internal_frames_per_buffer();
}
inline void StreamRequest::set_frames_per_buffer(::uint32_t value) {
  _internal_set_frames_per_buffer(value);
  // @@protoc_insertion_point(field_set:rero.StreamRequest.frames_per_buffer)
}
inline ::uint32_t StreamRequest::_internal_frames_per_buffer() const {
  return _impl_.frames_per_buffer_;
}
inline void StreamRequest::_internal_set_frames_per_buffer(::uint32_t value) {
  ;
  _impl_.frames_per_buffer_ = value;
}

// uint32 bytes_per_sample = 5;
inline void StreamRequest::clear_bytes_per_sample() {
  _impl_.bytes_per_sample_ = 0u;
}
inline ::uint32_t StreamRequest::bytes_per_sample() const {
  // @@protoc_insertion_point(field_get:rero.StreamRequest.bytes_per_sample)
  return _internal_bytes_per_sample();
}
inline void StreamRequest::set_bytes_per_sample(::uint32_t value) {
  _internal_set_bytes_per_sample(value);
  // @@protoc_insertion_point(field_set:rero.StreamRequest.bytes_per_sample)
}
inline ::uint32_t StreamRequest::_internal_bytes_per_sample() const {
  return _impl_.bytes_per_sample_;
}
inline void StreamRequest::_internal_set_bytes_per_sample(::uint32_t value) {
  ;
  _impl_.bytes_per_sample_ = value;
}

// -------------------------------------------------------------------

// PlayResult

// uint32 pa_error_code = 1;
inline void PlayResult::clear_pa_error_code() {
  _impl_.pa_error_code_ = 0u;
}
inline ::uint32_t PlayResult::pa_error_code() const {
  // @@protoc_insertion_point(field_get:rero.PlayResult.pa_error_code)
  return _internal_pa_error_code();
}
inline void PlayResult::set_pa_error_code(::uint32_t value) {
  _internal_set_pa_error_code(value);
  // @@protoc_insertion_point(field_set:rero.PlayResult.pa_error_code)
}
inline ::uint32_t PlayResult::_internal_pa_error_code() const {
  return _impl_.pa_error_code_;
}
inline void PlayResult::_internal_set_pa_error_code(::uint32_t value) {
  ;
  _impl_.pa_error_code_ = value;
}

// string pa_error_msg = 2;
inline void PlayResult::clear_pa_error_msg() {
  _impl_.pa_error_msg_.ClearToEmpty();
}
inline const std::string& PlayResult::pa_error_msg() const {
  // @@protoc_insertion_point(field_get:rero.PlayResult.pa_error_msg)
  return _internal_pa_error_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PlayResult::set_pa_error_msg(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.pa_error_msg_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rero.PlayResult.pa_error_msg)
}
inline std::string* PlayResult::mutable_pa_error_msg() {
  std::string* _s = _internal_mutable_pa_error_msg();
  // @@protoc_insertion_point(field_mutable:rero.PlayResult.pa_error_msg)
  return _s;
}
inline const std::string& PlayResult::_internal_pa_error_msg() const {
  return _impl_.pa_error_msg_.Get();
}
inline void PlayResult::_internal_set_pa_error_msg(const std::string& value) {
  ;


  _impl_.pa_error_msg_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayResult::_internal_mutable_pa_error_msg() {
  ;
  return _impl_.pa_error_msg_.Mutable( GetArenaForAllocation());
}
inline std::string* PlayResult::release_pa_error_msg() {
  // @@protoc_insertion_point(field_release:rero.PlayResult.pa_error_msg)
  return _impl_.pa_error_msg_.Release();
}
inline void PlayResult::set_allocated_pa_error_msg(std::string* value) {
  _impl_.pa_error_msg_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pa_error_msg_.IsDefault()) {
          _impl_.pa_error_msg_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rero.PlayResult.pa_error_msg)
}

// -------------------------------------------------------------------

// Audio

// uint32 num_samples = 1;
inline void Audio::clear_num_samples() {
  _impl_.num_samples_ = 0u;
}
inline ::uint32_t Audio::num_samples() const {
  // @@protoc_insertion_point(field_get:rero.Audio.num_samples)
  return _internal_num_samples();
}
inline void Audio::set_num_samples(::uint32_t value) {
  _internal_set_num_samples(value);
  // @@protoc_insertion_point(field_set:rero.Audio.num_samples)
}
inline ::uint32_t Audio::_internal_num_samples() const {
  return _impl_.num_samples_;
}
inline void Audio::_internal_set_num_samples(::uint32_t value) {
  ;
  _impl_.num_samples_ = value;
}

// uint32 num_channels = 2;
inline void Audio::clear_num_channels() {
  _impl_.num_channels_ = 0u;
}
inline ::uint32_t Audio::num_channels() const {
  // @@protoc_insertion_point(field_get:rero.Audio.num_channels)
  return _internal_num_channels();
}
inline void Audio::set_num_channels(::uint32_t value) {
  _internal_set_num_channels(value);
  // @@protoc_insertion_point(field_set:rero.Audio.num_channels)
}
inline ::uint32_t Audio::_internal_num_channels() const {
  return _impl_.num_channels_;
}
inline void Audio::_internal_set_num_channels(::uint32_t value) {
  ;
  _impl_.num_channels_ = value;
}

// uint32 bytes_per_sample = 3;
inline void Audio::clear_bytes_per_sample() {
  _impl_.bytes_per_sample_ = 0u;
}
inline ::uint32_t Audio::bytes_per_sample() const {
  // @@protoc_insertion_point(field_get:rero.Audio.bytes_per_sample)
  return _internal_bytes_per_sample();
}
inline void Audio::set_bytes_per_sample(::uint32_t value) {
  _internal_set_bytes_per_sample(value);
  // @@protoc_insertion_point(field_set:rero.Audio.bytes_per_sample)
}
inline ::uint32_t Audio::_internal_bytes_per_sample() const {
  return _impl_.bytes_per_sample_;
}
inline void Audio::_internal_set_bytes_per_sample(::uint32_t value) {
  ;
  _impl_.bytes_per_sample_ = value;
}

// uint32 frames_per_buffer = 4;
inline void Audio::clear_frames_per_buffer() {
  _impl_.frames_per_buffer_ = 0u;
}
inline ::uint32_t Audio::frames_per_buffer() const {
  // @@protoc_insertion_point(field_get:rero.Audio.frames_per_buffer)
  return _internal_frames_per_buffer();
}
inline void Audio::set_frames_per_buffer(::uint32_t value) {
  _internal_set_frames_per_buffer(value);
  // @@protoc_insertion_point(field_set:rero.Audio.frames_per_buffer)
}
inline ::uint32_t Audio::_internal_frames_per_buffer() const {
  return _impl_.frames_per_buffer_;
}
inline void Audio::_internal_set_frames_per_buffer(::uint32_t value) {
  ;
  _impl_.frames_per_buffer_ = value;
}

// uint32 sample_rate = 5;
inline void Audio::clear_sample_rate() {
  _impl_.sample_rate_ = 0u;
}
inline ::uint32_t Audio::sample_rate() const {
  // @@protoc_insertion_point(field_get:rero.Audio.sample_rate)
  return _internal_sample_rate();
}
inline void Audio::set_sample_rate(::uint32_t value) {
  _internal_set_sample_rate(value);
  // @@protoc_insertion_point(field_set:rero.Audio.sample_rate)
}
inline ::uint32_t Audio::_internal_sample_rate() const {
  return _impl_.sample_rate_;
}
inline void Audio::_internal_set_sample_rate(::uint32_t value) {
  ;
  _impl_.sample_rate_ = value;
}

// bytes raw_data = 6;
inline void Audio::clear_raw_data() {
  _impl_.raw_data_.ClearToEmpty();
}
inline const std::string& Audio::raw_data() const {
  // @@protoc_insertion_point(field_get:rero.Audio.raw_data)
  return _internal_raw_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Audio::set_raw_data(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.raw_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rero.Audio.raw_data)
}
inline std::string* Audio::mutable_raw_data() {
  std::string* _s = _internal_mutable_raw_data();
  // @@protoc_insertion_point(field_mutable:rero.Audio.raw_data)
  return _s;
}
inline const std::string& Audio::_internal_raw_data() const {
  return _impl_.raw_data_.Get();
}
inline void Audio::_internal_set_raw_data(const std::string& value) {
  ;


  _impl_.raw_data_.Set(value, GetArenaForAllocation());
}
inline std::string* Audio::_internal_mutable_raw_data() {
  ;
  return _impl_.raw_data_.Mutable( GetArenaForAllocation());
}
inline std::string* Audio::release_raw_data() {
  // @@protoc_insertion_point(field_release:rero.Audio.raw_data)
  return _impl_.raw_data_.Release();
}
inline void Audio::set_allocated_raw_data(std::string* value) {
  _impl_.raw_data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.raw_data_.IsDefault()) {
          _impl_.raw_data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rero.Audio.raw_data)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace rero


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_audio_2eproto_2epb_2eh
